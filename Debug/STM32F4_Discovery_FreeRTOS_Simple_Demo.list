
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004d34  08004d34  00014d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  08004d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          00001e4c  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001ec8  20001ec8  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000121f3  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002f67  00000000  00000000  0003229d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e80  00000000  00000000  00035208  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cf8  00000000  00000000  00036088  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006ae2  00000000  00000000  00036d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004ca6  00000000  00000000  0003d862  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00042508  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004034  00000000  00000000  00042584  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d18 	.word	0x08004d18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004d18 	.word	0x08004d18

080001d0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80001d6:	2018      	movs	r0, #24
 80001d8:	f000 fc52 	bl	8000a80 <pvPortMalloc>
 80001dc:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d007      	beq.n	80001f4 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	3304      	adds	r3, #4
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f979 	bl	80004e6 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80001f4:	687b      	ldr	r3, [r7, #4]
	}
 80001f6:	4618      	mov	r0, r3
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b090      	sub	sp, #64	; 0x40
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	607a      	str	r2, [r7, #4]
 800020c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8000216:	2300      	movs	r3, #0
 8000218:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d109      	bne.n	8000234 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000224:	f383 8811 	msr	BASEPRI, r3
 8000228:	f3bf 8f6f 	isb	sy
 800022c:	f3bf 8f4f 	dsb	sy
 8000230:	623b      	str	r3, [r7, #32]
 8000232:	e7fe      	b.n	8000232 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800023a:	2b00      	cmp	r3, #0
 800023c:	d009      	beq.n	8000252 <xEventGroupWaitBits+0x52>
 800023e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000242:	f383 8811 	msr	BASEPRI, r3
 8000246:	f3bf 8f6f 	isb	sy
 800024a:	f3bf 8f4f 	dsb	sy
 800024e:	61fb      	str	r3, [r7, #28]
 8000250:	e7fe      	b.n	8000250 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d109      	bne.n	800026c <xEventGroupWaitBits+0x6c>
 8000258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800025c:	f383 8811 	msr	BASEPRI, r3
 8000260:	f3bf 8f6f 	isb	sy
 8000264:	f3bf 8f4f 	dsb	sy
 8000268:	61bb      	str	r3, [r7, #24]
 800026a:	e7fe      	b.n	800026a <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800026c:	f001 ff96 	bl	800219c <xTaskGetSchedulerState>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d102      	bne.n	800027c <xEventGroupWaitBits+0x7c>
 8000276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000278:	2b00      	cmp	r3, #0
 800027a:	d101      	bne.n	8000280 <xEventGroupWaitBits+0x80>
 800027c:	2301      	movs	r3, #1
 800027e:	e000      	b.n	8000282 <xEventGroupWaitBits+0x82>
 8000280:	2300      	movs	r3, #0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d109      	bne.n	800029a <xEventGroupWaitBits+0x9a>
 8000286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800028a:	f383 8811 	msr	BASEPRI, r3
 800028e:	f3bf 8f6f 	isb	sy
 8000292:	f3bf 8f4f 	dsb	sy
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	e7fe      	b.n	8000298 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 800029a:	f001 fadf 	bl	800185c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800029e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80002a4:	683a      	ldr	r2, [r7, #0]
 80002a6:	68b9      	ldr	r1, [r7, #8]
 80002a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80002aa:	f000 f8fa 	bl	80004a2 <prvTestWaitCondition>
 80002ae:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80002b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d00e      	beq.n	80002d4 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80002b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d026      	beq.n	8000312 <xEventGroupWaitBits+0x112>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80002c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	43db      	mvns	r3, r3
 80002cc:	401a      	ands	r2, r3
 80002ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	e01e      	b.n	8000312 <xEventGroupWaitBits+0x112>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80002d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d102      	bne.n	80002e0 <xEventGroupWaitBits+0xe0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80002da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80002de:	e018      	b.n	8000312 <xEventGroupWaitBits+0x112>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d003      	beq.n	80002ee <xEventGroupWaitBits+0xee>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80002e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d003      	beq.n	80002fc <xEventGroupWaitBits+0xfc>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80002f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002fa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80002fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002fe:	1d18      	adds	r0, r3, #4
 8000300:	68ba      	ldr	r2, [r7, #8]
 8000302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000304:	4313      	orrs	r3, r2
 8000306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000308:	4619      	mov	r1, r3
 800030a:	f001 fcc1 	bl	8001c90 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8000312:	f001 fab1 	bl	8001878 <xTaskResumeAll>
 8000316:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8000318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800031a:	2b00      	cmp	r3, #0
 800031c:	d031      	beq.n	8000382 <xEventGroupWaitBits+0x182>
	{
		if( xAlreadyYielded == pdFALSE )
 800031e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000320:	2b00      	cmp	r3, #0
 8000322:	d107      	bne.n	8000334 <xEventGroupWaitBits+0x134>
		{
			portYIELD_WITHIN_API();
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <xEventGroupWaitBits+0x18c>)
 8000326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	f3bf 8f4f 	dsb	sy
 8000330:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8000334:	f002 f84a 	bl	80023cc <uxTaskResetEventItemValue>
 8000338:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800033a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800033c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000340:	2b00      	cmp	r3, #0
 8000342:	d11a      	bne.n	800037a <xEventGroupWaitBits+0x17a>
		{
			taskENTER_CRITICAL();
 8000344:	f000 fa8c 	bl	8000860 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8000348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	68b9      	ldr	r1, [r7, #8]
 8000352:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000354:	f000 f8a5 	bl	80004a2 <prvTestWaitCondition>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d009      	beq.n	8000372 <xEventGroupWaitBits+0x172>
				{
					if( xClearOnExit != pdFALSE )
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d006      	beq.n	8000372 <xEventGroupWaitBits+0x172>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	43db      	mvns	r3, r3
 800036c:	401a      	ands	r2, r3
 800036e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000370:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8000372:	f000 faa3 	bl	80008bc <vPortExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
 8000376:	2300      	movs	r3, #0
 8000378:	633b      	str	r3, [r7, #48]	; 0x30
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800037a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800037c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000380:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
 8000382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000384:	4618      	mov	r0, r3
 8000386:	3740      	adds	r7, #64	; 0x40
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	e000ed04 	.word	0xe000ed04

08000390 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08e      	sub	sp, #56	; 0x38
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800039a:	2300      	movs	r3, #0
 800039c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80003a2:	2300      	movs	r3, #0
 80003a4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d109      	bne.n	80003c0 <xEventGroupSetBits+0x30>
 80003ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b0:	f383 8811 	msr	BASEPRI, r3
 80003b4:	f3bf 8f6f 	isb	sy
 80003b8:	f3bf 8f4f 	dsb	sy
 80003bc:	613b      	str	r3, [r7, #16]
 80003be:	e7fe      	b.n	80003be <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d009      	beq.n	80003de <xEventGroupSetBits+0x4e>
 80003ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003ce:	f383 8811 	msr	BASEPRI, r3
 80003d2:	f3bf 8f6f 	isb	sy
 80003d6:	f3bf 8f4f 	dsb	sy
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	e7fe      	b.n	80003dc <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80003de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003e0:	3304      	adds	r3, #4
 80003e2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e6:	3308      	adds	r3, #8
 80003e8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80003ea:	f001 fa37 	bl	800185c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80003ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f0:	68db      	ldr	r3, [r3, #12]
 80003f2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80003f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	431a      	orrs	r2, r3
 80003fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003fe:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000400:	e03c      	b.n	800047c <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8000402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8000408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800040e:	2300      	movs	r3, #0
 8000410:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8000412:	69bb      	ldr	r3, [r7, #24]
 8000414:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000418:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800041a:	69bb      	ldr	r3, [r7, #24]
 800041c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000420:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000428:	2b00      	cmp	r3, #0
 800042a:	d108      	bne.n	800043e <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800042c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	69bb      	ldr	r3, [r7, #24]
 8000432:	4013      	ands	r3, r2
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00b      	beq.n	8000450 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8000438:	2301      	movs	r3, #1
 800043a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800043c:	e008      	b.n	8000450 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800043e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	69bb      	ldr	r3, [r7, #24]
 8000444:	401a      	ands	r2, r3
 8000446:	69bb      	ldr	r3, [r7, #24]
 8000448:	429a      	cmp	r2, r3
 800044a:	d101      	bne.n	8000450 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800044c:	2301      	movs	r3, #1
 800044e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8000450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000452:	2b00      	cmp	r3, #0
 8000454:	d010      	beq.n	8000478 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800045c:	2b00      	cmp	r3, #0
 800045e:	d003      	beq.n	8000468 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8000460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	4313      	orrs	r3, r2
 8000466:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000470:	4619      	mov	r1, r3
 8000472:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000474:	f001 fcd2 	bl	8001e1c <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800047c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800047e:	6a3b      	ldr	r3, [r7, #32]
 8000480:	429a      	cmp	r2, r3
 8000482:	d1be      	bne.n	8000402 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800048a:	43db      	mvns	r3, r3
 800048c:	401a      	ands	r2, r3
 800048e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000490:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8000492:	f001 f9f1 	bl	8001878 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8000496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000498:	681b      	ldr	r3, [r3, #0]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3738      	adds	r7, #56	; 0x38
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80004a2:	b480      	push	{r7}
 80004a4:	b087      	sub	sp, #28
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d107      	bne.n	80004c8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80004b8:	68fa      	ldr	r2, [r7, #12]
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	4013      	ands	r3, r2
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d00a      	beq.n	80004d8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80004c2:	2301      	movs	r3, #1
 80004c4:	617b      	str	r3, [r7, #20]
 80004c6:	e007      	b.n	80004d8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80004c8:	68fa      	ldr	r2, [r7, #12]
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	401a      	ands	r2, r3
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d101      	bne.n	80004d8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80004d4:	2301      	movs	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80004d8:	697b      	ldr	r3, [r7, #20]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	371c      	adds	r7, #28
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004e6:	b480      	push	{r7}
 80004e8:	b083      	sub	sp, #12
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f103 0208 	add.w	r2, r3, #8
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f04f 32ff 	mov.w	r2, #4294967295
 80004fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f103 0208 	add.w	r2, r3, #8
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f103 0208 	add.w	r2, r3, #8
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	689a      	ldr	r2, [r3, #8]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	601a      	str	r2, [r3, #0]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800059e:	d103      	bne.n	80005a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	e00c      	b.n	80005c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3308      	adds	r3, #8
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	e002      	b.n	80005b6 <vListInsert+0x2e>
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d9f6      	bls.n	80005b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	685a      	ldr	r2, [r3, #4]
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	691b      	ldr	r3, [r3, #16]
 8000606:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	6892      	ldr	r2, [r2, #8]
 8000610:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	6852      	ldr	r2, [r2, #4]
 800061a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	429a      	cmp	r2, r3
 8000624:	d103      	bne.n	800062e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	681b      	ldr	r3, [r3, #0]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3b04      	subs	r3, #4
 8000660:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3b04      	subs	r3, #4
 800066e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	f023 0201 	bic.w	r2, r3, #1
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3b04      	subs	r3, #4
 800067e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <pxPortInitialiseStack+0x64>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3b14      	subs	r3, #20
 800068a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3b04      	subs	r3, #4
 8000696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f06f 0202 	mvn.w	r2, #2
 800069e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3b20      	subs	r3, #32
 80006a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	080006b9 	.word	0x080006b9

080006b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <prvTaskExitError+0x38>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c6:	d009      	beq.n	80006dc <prvTaskExitError+0x24>
 80006c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006cc:	f383 8811 	msr	BASEPRI, r3
 80006d0:	f3bf 8f6f 	isb	sy
 80006d4:	f3bf 8f4f 	dsb	sy
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	e7fe      	b.n	80006da <prvTaskExitError+0x22>
 80006dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e0:	f383 8811 	msr	BASEPRI, r3
 80006e4:	f3bf 8f6f 	isb	sy
 80006e8:	f3bf 8f4f 	dsb	sy
 80006ec:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80006ee:	e7fe      	b.n	80006ee <prvTaskExitError+0x36>
 80006f0:	20000000 	.word	0x20000000
	...

08000700 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <pxCurrentTCBConst2>)
 8000702:	6819      	ldr	r1, [r3, #0]
 8000704:	6808      	ldr	r0, [r1, #0]
 8000706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800070a:	f380 8809 	msr	PSP, r0
 800070e:	f3bf 8f6f 	isb	sy
 8000712:	f04f 0000 	mov.w	r0, #0
 8000716:	f380 8811 	msr	BASEPRI, r0
 800071a:	4770      	bx	lr
 800071c:	f3af 8000 	nop.w

08000720 <pxCurrentTCBConst2>:
 8000720:	20001ca8 	.word	0x20001ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop

08000728 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000728:	4806      	ldr	r0, [pc, #24]	; (8000744 <prvPortStartFirstTask+0x1c>)
 800072a:	6800      	ldr	r0, [r0, #0]
 800072c:	6800      	ldr	r0, [r0, #0]
 800072e:	f380 8808 	msr	MSP, r0
 8000732:	b662      	cpsie	i
 8000734:	b661      	cpsie	f
 8000736:	f3bf 8f4f 	dsb	sy
 800073a:	f3bf 8f6f 	isb	sy
 800073e:	df00      	svc	0
 8000740:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000742:	bf00      	nop
 8000744:	e000ed08 	.word	0xe000ed08

08000748 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800074e:	4b3b      	ldr	r3, [pc, #236]	; (800083c <xPortStartScheduler+0xf4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a3b      	ldr	r2, [pc, #236]	; (8000840 <xPortStartScheduler+0xf8>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d109      	bne.n	800076c <xPortStartScheduler+0x24>
 8000758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800075c:	f383 8811 	msr	BASEPRI, r3
 8000760:	f3bf 8f6f 	isb	sy
 8000764:	f3bf 8f4f 	dsb	sy
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	e7fe      	b.n	800076a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <xPortStartScheduler+0xf4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a34      	ldr	r2, [pc, #208]	; (8000844 <xPortStartScheduler+0xfc>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d109      	bne.n	800078a <xPortStartScheduler+0x42>
 8000776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800077a:	f383 8811 	msr	BASEPRI, r3
 800077e:	f3bf 8f6f 	isb	sy
 8000782:	f3bf 8f4f 	dsb	sy
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	e7fe      	b.n	8000788 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800078a:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <xPortStartScheduler+0x100>)
 800078c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	22ff      	movs	r2, #255	; 0xff
 800079a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <xPortStartScheduler+0x104>)
 80007b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80007b2:	4b27      	ldr	r3, [pc, #156]	; (8000850 <xPortStartScheduler+0x108>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80007b8:	e009      	b.n	80007ce <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <xPortStartScheduler+0x108>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3b01      	subs	r3, #1
 80007c0:	4a23      	ldr	r2, [pc, #140]	; (8000850 <xPortStartScheduler+0x108>)
 80007c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	2b80      	cmp	r3, #128	; 0x80
 80007d8:	d0ef      	beq.n	80007ba <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <xPortStartScheduler+0x108>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <xPortStartScheduler+0x108>)
 80007e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <xPortStartScheduler+0x108>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80007ec:	4a18      	ldr	r2, [pc, #96]	; (8000850 <xPortStartScheduler+0x108>)
 80007ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80007f8:	4a16      	ldr	r2, [pc, #88]	; (8000854 <xPortStartScheduler+0x10c>)
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <xPortStartScheduler+0x10c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000802:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <xPortStartScheduler+0x10c>)
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <xPortStartScheduler+0x10c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800080e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000810:	f000 f8d2 	bl	80009b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <xPortStartScheduler+0x110>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800081a:	f000 f8e9 	bl	80009f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <xPortStartScheduler+0x114>)
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <xPortStartScheduler+0x114>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000828:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800082a:	f7ff ff7d 	bl	8000728 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800082e:	f7ff ff43 	bl	80006b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	e000ed00 	.word	0xe000ed00
 8000840:	410fc271 	.word	0x410fc271
 8000844:	410fc270 	.word	0x410fc270
 8000848:	e000e400 	.word	0xe000e400
 800084c:	20000098 	.word	0x20000098
 8000850:	2000009c 	.word	0x2000009c
 8000854:	e000ed20 	.word	0xe000ed20
 8000858:	20000000 	.word	0x20000000
 800085c:	e000ef34 	.word	0xe000ef34

08000860 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800086a:	f383 8811 	msr	BASEPRI, r3
 800086e:	f3bf 8f6f 	isb	sy
 8000872:	f3bf 8f4f 	dsb	sy
 8000876:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <vPortEnterCritical+0x54>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <vPortEnterCritical+0x54>)
 8000880:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <vPortEnterCritical+0x54>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d10e      	bne.n	80008a8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <vPortEnterCritical+0x58>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d009      	beq.n	80008a8 <vPortEnterCritical+0x48>
 8000894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000898:	f383 8811 	msr	BASEPRI, r3
 800089c:	f3bf 8f6f 	isb	sy
 80008a0:	f3bf 8f4f 	dsb	sy
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	e7fe      	b.n	80008a6 <vPortEnterCritical+0x46>
	}
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	20000000 	.word	0x20000000
 80008b8:	e000ed04 	.word	0xe000ed04

080008bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <vPortExitCritical+0x4c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d109      	bne.n	80008de <vPortExitCritical+0x22>
 80008ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ce:	f383 8811 	msr	BASEPRI, r3
 80008d2:	f3bf 8f6f 	isb	sy
 80008d6:	f3bf 8f4f 	dsb	sy
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	e7fe      	b.n	80008dc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <vPortExitCritical+0x4c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	4a08      	ldr	r2, [pc, #32]	; (8000908 <vPortExitCritical+0x4c>)
 80008e6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <vPortExitCritical+0x4c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <vPortExitCritical+0x3e>
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000000 	.word	0x20000000
 800090c:	00000000 	.word	0x00000000

08000910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000910:	f3ef 8009 	mrs	r0, PSP
 8000914:	f3bf 8f6f 	isb	sy
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <pxCurrentTCBConst>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	f01e 0f10 	tst.w	lr, #16
 8000920:	bf08      	it	eq
 8000922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800092a:	6010      	str	r0, [r2, #0]
 800092c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000934:	f380 8811 	msr	BASEPRI, r0
 8000938:	f3bf 8f4f 	dsb	sy
 800093c:	f3bf 8f6f 	isb	sy
 8000940:	f001 f902 	bl	8001b48 <vTaskSwitchContext>
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	f380 8811 	msr	BASEPRI, r0
 800094c:	bc08      	pop	{r3}
 800094e:	6819      	ldr	r1, [r3, #0]
 8000950:	6808      	ldr	r0, [r1, #0]
 8000952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000956:	f01e 0f10 	tst.w	lr, #16
 800095a:	bf08      	it	eq
 800095c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000960:	f380 8809 	msr	PSP, r0
 8000964:	f3bf 8f6f 	isb	sy
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	f3af 8000 	nop.w

08000970 <pxCurrentTCBConst>:
 8000970:	20001ca8 	.word	0x20001ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop

08000978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
	__asm volatile
 800097e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000982:	f383 8811 	msr	BASEPRI, r3
 8000986:	f3bf 8f6f 	isb	sy
 800098a:	f3bf 8f4f 	dsb	sy
 800098e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000990:	f001 f81e 	bl	80019d0 <xTaskIncrementTick>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SysTick_Handler+0x3c>)
 800099c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	e000ed04 	.word	0xe000ed04

080009b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80009bc:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <vPortSetupTimerInterrupt+0x28>)
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <vPortSetupTimerInterrupt+0x2c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4909      	ldr	r1, [pc, #36]	; (80009e8 <vPortSetupTimerInterrupt+0x30>)
 80009c4:	fba1 1303 	umull	r1, r3, r1, r3
 80009c8:	099b      	lsrs	r3, r3, #6
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <vPortSetupTimerInterrupt+0x34>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	601a      	str	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e014 	.word	0xe000e014
 80009e4:	20000014 	.word	0x20000014
 80009e8:	10624dd3 	.word	0x10624dd3
 80009ec:	e000e010 	.word	0xe000e010

080009f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80009f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000a00 <vPortEnableVFP+0x10>
 80009f4:	6801      	ldr	r1, [r0, #0]
 80009f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80009fa:	6001      	str	r1, [r0, #0]
 80009fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80009fe:	bf00      	nop
 8000a00:	e000ed88 	.word	0xe000ed88

08000a04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8000a0a:	f3ef 8305 	mrs	r3, IPSR
 8000a0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	d913      	bls.n	8000a3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000a16:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <vPortValidateInterruptPriority+0x6c>)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <vPortValidateInterruptPriority+0x70>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	7afa      	ldrb	r2, [r7, #11]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d209      	bcs.n	8000a3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a2e:	f383 8811 	msr	BASEPRI, r3
 8000a32:	f3bf 8f6f 	isb	sy
 8000a36:	f3bf 8f4f 	dsb	sy
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	e7fe      	b.n	8000a3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <vPortValidateInterruptPriority+0x74>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <vPortValidateInterruptPriority+0x78>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d909      	bls.n	8000a62 <vPortValidateInterruptPriority+0x5e>
 8000a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a52:	f383 8811 	msr	BASEPRI, r3
 8000a56:	f3bf 8f6f 	isb	sy
 8000a5a:	f3bf 8f4f 	dsb	sy
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	e7fe      	b.n	8000a60 <vPortValidateInterruptPriority+0x5c>
	}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e3f0 	.word	0xe000e3f0
 8000a74:	20000098 	.word	0x20000098
 8000a78:	e000ed0c 	.word	0xe000ed0c
 8000a7c:	2000009c 	.word	0x2000009c

08000a80 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d004      	beq.n	8000aa0 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f023 0307 	bic.w	r3, r3, #7
 8000a9c:	3308      	adds	r3, #8
 8000a9e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000aa0:	f000 fedc 	bl	800185c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <pvPortMalloc+0x88>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <pvPortMalloc+0x8c>)
 8000aae:	f023 0307 	bic.w	r3, r3, #7
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <pvPortMalloc+0x88>)
 8000ab6:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <pvPortMalloc+0x90>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d813      	bhi.n	8000af0 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <pvPortMalloc+0x90>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	441a      	add	r2, r3
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <pvPortMalloc+0x90>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d90b      	bls.n	8000af0 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <pvPortMalloc+0x88>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <pvPortMalloc+0x90>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <pvPortMalloc+0x90>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <pvPortMalloc+0x90>)
 8000aee:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000af0:	f000 fec2 	bl	8001878 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8000afa:	f002 fd15 	bl	8003528 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20001ca4 	.word	0x20001ca4
 8000b0c:	200000a8 	.word	0x200000a8
 8000b10:	20001ca0 	.word	0x20001ca0

08000b14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d009      	beq.n	8000b36 <vPortFree+0x22>
 8000b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b26:	f383 8811 	msr	BASEPRI, r3
 8000b2a:	f3bf 8f6f 	isb	sy
 8000b2e:	f3bf 8f4f 	dsb	sy
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e7fe      	b.n	8000b34 <vPortFree+0x20>
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <xPortGetFreeHeapSize+0x18>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8000b50:	3318      	adds	r3, #24
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	20001ca0 	.word	0x20001ca0

08000b60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d109      	bne.n	8000b88 <xQueueGenericReset+0x28>
 8000b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b78:	f383 8811 	msr	BASEPRI, r3
 8000b7c:	f3bf 8f6f 	isb	sy
 8000b80:	f3bf 8f4f 	dsb	sy
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	e7fe      	b.n	8000b86 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000b88:	f7ff fe6a 	bl	8000860 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b94:	68f9      	ldr	r1, [r7, #12]
 8000b96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b98:	fb01 f303 	mul.w	r3, r1, r3
 8000b9c:	441a      	add	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	68f9      	ldr	r1, [r7, #12]
 8000bbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bbe:	fb01 f303 	mul.w	r3, r1, r3
 8000bc2:	441a      	add	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	22ff      	movs	r2, #255	; 0xff
 8000bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	22ff      	movs	r2, #255	; 0xff
 8000bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d114      	bne.n	8000c08 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d01a      	beq.n	8000c1c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3310      	adds	r3, #16
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 f8b4 	bl	8001d58 <xTaskRemoveFromEventList>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d012      	beq.n	8000c1c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <xQueueGenericReset+0xcc>)
 8000bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	f3bf 8f4f 	dsb	sy
 8000c02:	f3bf 8f6f 	isb	sy
 8000c06:	e009      	b.n	8000c1c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3310      	adds	r3, #16
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fc6a 	bl	80004e6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3324      	adds	r3, #36	; 0x24
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fc65 	bl	80004e6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000c1c:	f7ff fe4e 	bl	80008bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000c20:	2301      	movs	r3, #1
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000ed04 	.word	0xe000ed04

08000c30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d109      	bne.n	8000c58 <xQueueGenericCreate+0x28>
 8000c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c48:	f383 8811 	msr	BASEPRI, r3
 8000c4c:	f3bf 8f6f 	isb	sy
 8000c50:	f3bf 8f4f 	dsb	sy
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	e7fe      	b.n	8000c56 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d102      	bne.n	8000c64 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	e004      	b.n	8000c6e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	fb02 f303 	mul.w	r3, r2, r3
 8000c6c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3348      	adds	r3, #72	; 0x48
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff04 	bl	8000a80 <pvPortMalloc>
 8000c78:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d00b      	beq.n	8000c98 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	3348      	adds	r3, #72	; 0x48
 8000c84:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f000 f805 	bl	8000ca2 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000c98:	69bb      	ldr	r3, [r7, #24]
	}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b084      	sub	sp, #16
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d103      	bne.n	8000cbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	e002      	b.n	8000cc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	69b8      	ldr	r0, [r7, #24]
 8000cd4:	f7ff ff44 	bl	8000b60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <xQueueGenericSend+0x30>
 8000cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d00:	f383 8811 	msr	BASEPRI, r3
 8000d04:	f3bf 8f6f 	isb	sy
 8000d08:	f3bf 8f4f 	dsb	sy
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d0e:	e7fe      	b.n	8000d0e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d103      	bne.n	8000d1e <xQueueGenericSend+0x3e>
 8000d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <xQueueGenericSend+0x42>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <xQueueGenericSend+0x44>
 8000d22:	2300      	movs	r3, #0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d109      	bne.n	8000d3c <xQueueGenericSend+0x5c>
 8000d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d2c:	f383 8811 	msr	BASEPRI, r3
 8000d30:	f3bf 8f6f 	isb	sy
 8000d34:	f3bf 8f4f 	dsb	sy
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3a:	e7fe      	b.n	8000d3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d103      	bne.n	8000d4a <xQueueGenericSend+0x6a>
 8000d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d101      	bne.n	8000d4e <xQueueGenericSend+0x6e>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <xQueueGenericSend+0x70>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d109      	bne.n	8000d68 <xQueueGenericSend+0x88>
 8000d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d58:	f383 8811 	msr	BASEPRI, r3
 8000d5c:	f3bf 8f6f 	isb	sy
 8000d60:	f3bf 8f4f 	dsb	sy
 8000d64:	623b      	str	r3, [r7, #32]
 8000d66:	e7fe      	b.n	8000d66 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d68:	f001 fa18 	bl	800219c <xTaskGetSchedulerState>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <xQueueGenericSend+0x98>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <xQueueGenericSend+0x9c>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <xQueueGenericSend+0x9e>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d109      	bne.n	8000d96 <xQueueGenericSend+0xb6>
 8000d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d86:	f383 8811 	msr	BASEPRI, r3
 8000d8a:	f3bf 8f6f 	isb	sy
 8000d8e:	f3bf 8f4f 	dsb	sy
 8000d92:	61fb      	str	r3, [r7, #28]
 8000d94:	e7fe      	b.n	8000d94 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d96:	f7ff fd63 	bl	8000860 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d302      	bcc.n	8000dac <xQueueGenericSend+0xcc>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d129      	bne.n	8000e00 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000db2:	f000 fa35 	bl	8001220 <prvCopyDataToQueue>
 8000db6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d010      	beq.n	8000de2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc2:	3324      	adds	r3, #36	; 0x24
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 ffc7 	bl	8001d58 <xTaskRemoveFromEventList>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d013      	beq.n	8000df8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <xQueueGenericSend+0x1f0>)
 8000dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	f3bf 8f4f 	dsb	sy
 8000ddc:	f3bf 8f6f 	isb	sy
 8000de0:	e00a      	b.n	8000df8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d007      	beq.n	8000df8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000de8:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <xQueueGenericSend+0x1f0>)
 8000dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	f3bf 8f4f 	dsb	sy
 8000df4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000df8:	f7ff fd60 	bl	80008bc <vPortExitCritical>
				return pdPASS;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e063      	b.n	8000ec8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d103      	bne.n	8000e0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e06:	f7ff fd59 	bl	80008bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e05c      	b.n	8000ec8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d106      	bne.n	8000e22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 f865 	bl	8001ee8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e22:	f7ff fd4b 	bl	80008bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e26:	f000 fd19 	bl	800185c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e2a:	f7ff fd19 	bl	8000860 <vPortEnterCritical>
 8000e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3a:	d103      	bne.n	8000e44 <xQueueGenericSend+0x164>
 8000e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e50:	d103      	bne.n	8000e5a <xQueueGenericSend+0x17a>
 8000e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e5a:	f7ff fd2f 	bl	80008bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e5e:	1d3a      	adds	r2, r7, #4
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 f862 	bl	8001f30 <xTaskCheckForTimeOut>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d124      	bne.n	8000ebc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e74:	f000 facc 	bl	8001410 <prvIsQueueFull>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d018      	beq.n	8000eb0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e80:	3310      	adds	r3, #16
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4611      	mov	r1, r2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fede 	bl	8001c48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e8e:	f000 fa57 	bl	8001340 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e92:	f000 fcf1 	bl	8001878 <xTaskResumeAll>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f47f af7c 	bne.w	8000d96 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <xQueueGenericSend+0x1f0>)
 8000ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	f3bf 8f4f 	dsb	sy
 8000eaa:	f3bf 8f6f 	isb	sy
 8000eae:	e772      	b.n	8000d96 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eb2:	f000 fa45 	bl	8001340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000eb6:	f000 fcdf 	bl	8001878 <xTaskResumeAll>
 8000eba:	e76c      	b.n	8000d96 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ebe:	f000 fa3f 	bl	8001340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ec2:	f000 fcd9 	bl	8001878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000ec6:	2300      	movs	r3, #0
		}
	}
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3738      	adds	r7, #56	; 0x38
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	e000ed04 	.word	0xe000ed04

08000ed4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d109      	bne.n	8000f00 <xQueueGenericSendFromISR+0x2c>
 8000eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ef0:	f383 8811 	msr	BASEPRI, r3
 8000ef4:	f3bf 8f6f 	isb	sy
 8000ef8:	f3bf 8f4f 	dsb	sy
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
 8000efe:	e7fe      	b.n	8000efe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d103      	bne.n	8000f0e <xQueueGenericSendFromISR+0x3a>
 8000f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <xQueueGenericSendFromISR+0x3e>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <xQueueGenericSendFromISR+0x40>
 8000f12:	2300      	movs	r3, #0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d109      	bne.n	8000f2c <xQueueGenericSendFromISR+0x58>
 8000f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f1c:	f383 8811 	msr	BASEPRI, r3
 8000f20:	f3bf 8f6f 	isb	sy
 8000f24:	f3bf 8f4f 	dsb	sy
 8000f28:	623b      	str	r3, [r7, #32]
 8000f2a:	e7fe      	b.n	8000f2a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d103      	bne.n	8000f3a <xQueueGenericSendFromISR+0x66>
 8000f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d101      	bne.n	8000f3e <xQueueGenericSendFromISR+0x6a>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <xQueueGenericSendFromISR+0x6c>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d109      	bne.n	8000f58 <xQueueGenericSendFromISR+0x84>
 8000f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f48:	f383 8811 	msr	BASEPRI, r3
 8000f4c:	f3bf 8f6f 	isb	sy
 8000f50:	f3bf 8f4f 	dsb	sy
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e7fe      	b.n	8000f56 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f58:	f7ff fd54 	bl	8000a04 <vPortValidateInterruptPriority>
	__asm volatile
 8000f5c:	f3ef 8211 	mrs	r2, BASEPRI
 8000f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f64:	f383 8811 	msr	BASEPRI, r3
 8000f68:	f3bf 8f6f 	isb	sy
 8000f6c:	f3bf 8f4f 	dsb	sy
 8000f70:	61ba      	str	r2, [r7, #24]
 8000f72:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000f74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d302      	bcc.n	8000f8a <xQueueGenericSendFromISR+0xb6>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d12c      	bne.n	8000fe4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f9a:	f000 f941 	bl	8001220 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa6:	d112      	bne.n	8000fce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d016      	beq.n	8000fde <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb2:	3324      	adds	r3, #36	; 0x24
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fecf 	bl	8001d58 <xTaskRemoveFromEventList>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00e      	beq.n	8000fde <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e007      	b.n	8000fde <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000fce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000fe2:	e001      	b.n	8000fe8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8000fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fea:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3738      	adds	r7, #56	; 0x38
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	; 0x38
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800100a:	2300      	movs	r3, #0
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001014:	2b00      	cmp	r3, #0
 8001016:	d109      	bne.n	800102c <xQueueGenericReceive+0x30>
	__asm volatile
 8001018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101c:	f383 8811 	msr	BASEPRI, r3
 8001020:	f3bf 8f6f 	isb	sy
 8001024:	f3bf 8f4f 	dsb	sy
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
 800102a:	e7fe      	b.n	800102a <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d103      	bne.n	800103a <xQueueGenericReceive+0x3e>
 8001032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <xQueueGenericReceive+0x42>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <xQueueGenericReceive+0x44>
 800103e:	2300      	movs	r3, #0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d109      	bne.n	8001058 <xQueueGenericReceive+0x5c>
 8001044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001048:	f383 8811 	msr	BASEPRI, r3
 800104c:	f3bf 8f6f 	isb	sy
 8001050:	f3bf 8f4f 	dsb	sy
 8001054:	623b      	str	r3, [r7, #32]
 8001056:	e7fe      	b.n	8001056 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001058:	f001 f8a0 	bl	800219c <xTaskGetSchedulerState>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <xQueueGenericReceive+0x6c>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <xQueueGenericReceive+0x70>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <xQueueGenericReceive+0x72>
 800106c:	2300      	movs	r3, #0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <xQueueGenericReceive+0x8a>
 8001072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001076:	f383 8811 	msr	BASEPRI, r3
 800107a:	f3bf 8f6f 	isb	sy
 800107e:	f3bf 8f4f 	dsb	sy
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	e7fe      	b.n	8001084 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001086:	f7ff fbeb 	bl	8000860 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800108a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001092:	2b00      	cmp	r3, #0
 8001094:	d046      	beq.n	8001124 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010a0:	f000 f928 	bl	80012f4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d121      	bne.n	80010ee <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80010aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ac:	1e5a      	subs	r2, r3, #1
 80010ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b0:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80010b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d104      	bne.n	80010c4 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80010ba:	f001 f99f 	bl	80023fc <pvTaskIncrementMutexHeldCount>
 80010be:	4602      	mov	r2, r0
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d027      	beq.n	800111c <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ce:	3310      	adds	r3, #16
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fe41 	bl	8001d58 <xTaskRemoveFromEventList>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d01f      	beq.n	800111c <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80010dc:	4b4f      	ldr	r3, [pc, #316]	; (800121c <xQueueGenericReceive+0x220>)
 80010de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	f3bf 8f4f 	dsb	sy
 80010e8:	f3bf 8f6f 	isb	sy
 80010ec:	e016      	b.n	800111c <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80010ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010f2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00f      	beq.n	800111c <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fe:	3324      	adds	r3, #36	; 0x24
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fe29 	bl	8001d58 <xTaskRemoveFromEventList>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800110c:	4b43      	ldr	r3, [pc, #268]	; (800121c <xQueueGenericReceive+0x220>)
 800110e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	f3bf 8f4f 	dsb	sy
 8001118:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800111c:	f7ff fbce 	bl	80008bc <vPortExitCritical>
				return pdPASS;
 8001120:	2301      	movs	r3, #1
 8001122:	e077      	b.n	8001214 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d103      	bne.n	8001132 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800112a:	f7ff fbc7 	bl	80008bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800112e:	2300      	movs	r3, #0
 8001130:	e070      	b.n	8001214 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fed3 	bl	8001ee8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001142:	2301      	movs	r3, #1
 8001144:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001146:	f7ff fbb9 	bl	80008bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800114a:	f000 fb87 	bl	800185c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800114e:	f7ff fb87 	bl	8000860 <vPortEnterCritical>
 8001152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001158:	b25b      	sxtb	r3, r3
 800115a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115e:	d103      	bne.n	8001168 <xQueueGenericReceive+0x16c>
 8001160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800116e:	b25b      	sxtb	r3, r3
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d103      	bne.n	800117e <xQueueGenericReceive+0x182>
 8001176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800117e:	f7ff fb9d 	bl	80008bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001182:	1d3a      	adds	r2, r7, #4
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fed0 	bl	8001f30 <xTaskCheckForTimeOut>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d131      	bne.n	80011fa <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001198:	f000 f924 	bl	80013e4 <prvIsQueueEmpty>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d025      	beq.n	80011ee <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80011a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d108      	bne.n	80011bc <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 80011aa:	f7ff fb59 	bl	8000860 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80011ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 f810 	bl	80021d8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80011b8:	f7ff fb80 	bl	80008bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80011bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011be:	3324      	adds	r3, #36	; 0x24
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fd3f 	bl	8001c48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80011ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011cc:	f000 f8b8 	bl	8001340 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80011d0:	f000 fb52 	bl	8001878 <xTaskResumeAll>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f47f af55 	bne.w	8001086 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <xQueueGenericReceive+0x220>)
 80011de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	f3bf 8f4f 	dsb	sy
 80011e8:	f3bf 8f6f 	isb	sy
 80011ec:	e74b      	b.n	8001086 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80011ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011f0:	f000 f8a6 	bl	8001340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011f4:	f000 fb40 	bl	8001878 <xTaskResumeAll>
 80011f8:	e745      	b.n	8001086 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80011fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011fc:	f000 f8a0 	bl	8001340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001200:	f000 fb3a 	bl	8001878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001206:	f000 f8ed 	bl	80013e4 <prvIsQueueEmpty>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	f43f af3a 	beq.w	8001086 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001212:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001214:	4618      	mov	r0, r3
 8001216:	3738      	adds	r7, #56	; 0x38
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	e000ed04 	.word	0xe000ed04

08001220 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001234:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10d      	bne.n	800125a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d14d      	bne.n	80012e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f001 f83a 	bl	80022c4 <xTaskPriorityDisinherit>
 8001250:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	e043      	b.n	80012e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d119      	bne.n	8001294 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6898      	ldr	r0, [r3, #8]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	461a      	mov	r2, r3
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	f003 f80a 	bl	8004284 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	441a      	add	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d32b      	bcc.n	80012e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	e026      	b.n	80012e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68d8      	ldr	r0, [r3, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	461a      	mov	r2, r3
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	f002 fff0 	bl	8004284 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	425b      	negs	r3, r3
 80012ae:	441a      	add	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	425b      	negs	r3, r3
 80012ca:	441a      	add	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d105      	bne.n	80012e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	3b01      	subs	r3, #1
 80012e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80012ea:	697b      	ldr	r3, [r7, #20]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	d018      	beq.n	8001338 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	441a      	add	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	d303      	bcc.n	8001328 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68d9      	ldr	r1, [r3, #12]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	461a      	mov	r2, r3
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f002 ffa6 	bl	8004284 <memcpy>
	}
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001348:	f7ff fa8a 	bl	8000860 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001352:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001354:	e011      	b.n	800137a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	2b00      	cmp	r3, #0
 800135c:	d012      	beq.n	8001384 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3324      	adds	r3, #36	; 0x24
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fcf8 	bl	8001d58 <xTaskRemoveFromEventList>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800136e:	f000 fe3d 	bl	8001fec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3b01      	subs	r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	dce9      	bgt.n	8001356 <prvUnlockQueue+0x16>
 8001382:	e000      	b.n	8001386 <prvUnlockQueue+0x46>
					break;
 8001384:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	22ff      	movs	r2, #255	; 0xff
 800138a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800138e:	f7ff fa95 	bl	80008bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001392:	f7ff fa65 	bl	8000860 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800139c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800139e:	e011      	b.n	80013c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d012      	beq.n	80013ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3310      	adds	r3, #16
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fcd3 	bl	8001d58 <xTaskRemoveFromEventList>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80013b8:	f000 fe18 	bl	8001fec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	3b01      	subs	r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dce9      	bgt.n	80013a0 <prvUnlockQueue+0x60>
 80013cc:	e000      	b.n	80013d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80013ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	22ff      	movs	r2, #255	; 0xff
 80013d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013d8:	f7ff fa70 	bl	80008bc <vPortExitCritical>
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013ec:	f7ff fa38 	bl	8000860 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80013f8:	2301      	movs	r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	e001      	b.n	8001402 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001402:	f7ff fa5b 	bl	80008bc <vPortExitCritical>

	return xReturn;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001418:	f7ff fa22 	bl	8000860 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001424:	429a      	cmp	r2, r3
 8001426:	d102      	bne.n	800142e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001428:	2301      	movs	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	e001      	b.n	8001432 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001432:	f7ff fa43 	bl	80008bc <vPortExitCritical>

	return xReturn;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	e014      	b.n	800147a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <vQueueAddToRegistry+0x4c>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10b      	bne.n	8001474 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800145c:	490b      	ldr	r1, [pc, #44]	; (800148c <vQueueAddToRegistry+0x4c>)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001466:	4a09      	ldr	r2, [pc, #36]	; (800148c <vQueueAddToRegistry+0x4c>)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001472:	e005      	b.n	8001480 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3301      	adds	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b07      	cmp	r3, #7
 800147e:	d9e7      	bls.n	8001450 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	20001df4 	.word	0x20001df4

08001490 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80014a0:	f7ff f9de 	bl	8000860 <vPortEnterCritical>
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d103      	bne.n	80014ba <vQueueWaitForMessageRestricted+0x2a>
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c6:	d103      	bne.n	80014d0 <vQueueWaitForMessageRestricted+0x40>
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014d0:	f7ff f9f4 	bl	80008bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d106      	bne.n	80014ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3324      	adds	r3, #36	; 0x24
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fc0d 	bl	8001d04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff28 	bl	8001340 <prvUnlockQueue>
	}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	4613      	mov	r3, r2
 8001506:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fab7 	bl	8000a80 <pvPortMalloc>
 8001512:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00e      	beq.n	8001538 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800151a:	2050      	movs	r0, #80	; 0x50
 800151c:	f7ff fab0 	bl	8000a80 <pvPortMalloc>
 8001520:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
 800152e:	e005      	b.n	800153c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7ff faef 	bl	8000b14 <vPortFree>
 8001536:	e001      	b.n	800153c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d013      	beq.n	800156a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001542:	88fa      	ldrh	r2, [r7, #6]
 8001544:	2300      	movs	r3, #0
 8001546:	9303      	str	r3, [sp, #12]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 f80e 	bl	800157a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800155e:	69f8      	ldr	r0, [r7, #28]
 8001560:	f000 f892 	bl	8001688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001564:	2301      	movs	r3, #1
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	e002      	b.n	8001570 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001570:	69bb      	ldr	r3, [r7, #24]
	}
 8001572:	4618      	mov	r0, r3
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b088      	sub	sp, #32
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	461a      	mov	r2, r3
 8001592:	21a5      	movs	r1, #165	; 0xa5
 8001594:	f002 fe81 	bl	800429a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015a2:	3b01      	subs	r3, #1
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f023 0307 	bic.w	r3, r3, #7
 80015b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d009      	beq.n	80015d0 <prvInitialiseNewTask+0x56>
 80015bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c0:	f383 8811 	msr	BASEPRI, r3
 80015c4:	f3bf 8f6f 	isb	sy
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e7fe      	b.n	80015ce <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e012      	b.n	80015fc <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	4413      	add	r3, r2
 80015dc:	7819      	ldrb	r1, [r3, #0]
 80015de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	3334      	adds	r3, #52	; 0x34
 80015e6:	460a      	mov	r2, r1
 80015e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2b09      	cmp	r3, #9
 8001600:	d9e9      	bls.n	80015d6 <prvInitialiseNewTask+0x5c>
 8001602:	e000      	b.n	8001606 <prvInitialiseNewTask+0x8c>
		{
			break;
 8001604:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	2b04      	cmp	r3, #4
 8001612:	d901      	bls.n	8001618 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001614:	2304      	movs	r3, #4
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800161e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001626:	2200      	movs	r2, #0
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	3304      	adds	r3, #4
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff79 	bl	8000526 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001636:	3318      	adds	r3, #24
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff74 	bl	8000526 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001642:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	f1c3 0205 	rsb	r2, r3, #5
 800164a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001656:	2200      	movs	r2, #0
 8001658:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165c:	2200      	movs	r2, #0
 800165e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	68f9      	ldr	r1, [r7, #12]
 8001666:	69b8      	ldr	r0, [r7, #24]
 8001668:	f7fe fff2 	bl	8000650 <pxPortInitialiseStack>
 800166c:	4602      	mov	r2, r0
 800166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001670:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800167c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001690:	f7ff f8e6 	bl	8000860 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <prvAddNewTaskToReadyList+0xb8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a29      	ldr	r2, [pc, #164]	; (8001740 <prvAddNewTaskToReadyList+0xb8>)
 800169c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <prvAddNewTaskToReadyList+0xbc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80016a6:	4a27      	ldr	r2, [pc, #156]	; (8001744 <prvAddNewTaskToReadyList+0xbc>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <prvAddNewTaskToReadyList+0xb8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d110      	bne.n	80016d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80016b4:	f000 fcc0 	bl	8002038 <prvInitialiseTaskLists>
 80016b8:	e00d      	b.n	80016d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <prvAddNewTaskToReadyList+0xc0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d109      	bne.n	80016d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <prvAddNewTaskToReadyList+0xbc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d802      	bhi.n	80016d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80016d0:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <prvAddNewTaskToReadyList+0xbc>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <prvAddNewTaskToReadyList+0xc4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <prvAddNewTaskToReadyList+0xc4>)
 80016de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	2201      	movs	r2, #1
 80016e6:	409a      	lsls	r2, r3
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <prvAddNewTaskToReadyList+0xc8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	4a18      	ldr	r2, [pc, #96]	; (8001750 <prvAddNewTaskToReadyList+0xc8>)
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <prvAddNewTaskToReadyList+0xcc>)
 8001700:	441a      	add	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	4619      	mov	r1, r3
 8001708:	4610      	mov	r0, r2
 800170a:	f7fe ff19 	bl	8000540 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800170e:	f7ff f8d5 	bl	80008bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <prvAddNewTaskToReadyList+0xc0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00e      	beq.n	8001738 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <prvAddNewTaskToReadyList+0xbc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	429a      	cmp	r2, r3
 8001726:	d207      	bcs.n	8001738 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <prvAddNewTaskToReadyList+0xd0>)
 800172a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f3bf 8f4f 	dsb	sy
 8001734:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20001d80 	.word	0x20001d80
 8001744:	20001ca8 	.word	0x20001ca8
 8001748:	20001d8c 	.word	0x20001d8c
 800174c:	20001d9c 	.word	0x20001d9c
 8001750:	20001d88 	.word	0x20001d88
 8001754:	20001cac 	.word	0x20001cac
 8001758:	e000ed04 	.word	0xe000ed04

0800175c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d016      	beq.n	800179c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <vTaskDelay+0x60>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <vTaskDelay+0x2e>
 8001776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800177a:	f383 8811 	msr	BASEPRI, r3
 800177e:	f3bf 8f6f 	isb	sy
 8001782:	f3bf 8f4f 	dsb	sy
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	e7fe      	b.n	8001788 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800178a:	f000 f867 	bl	800185c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800178e:	2100      	movs	r1, #0
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fe47 	bl	8002424 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001796:	f000 f86f 	bl	8001878 <xTaskResumeAll>
 800179a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d107      	bne.n	80017b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <vTaskDelay+0x64>)
 80017a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20001da8 	.word	0x20001da8
 80017c0:	e000ed04 	.word	0xe000ed04

080017c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <vTaskStartScheduler+0x80>)
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	2282      	movs	r2, #130	; 0x82
 80017d6:	491c      	ldr	r1, [pc, #112]	; (8001848 <vTaskStartScheduler+0x84>)
 80017d8:	481c      	ldr	r0, [pc, #112]	; (800184c <vTaskStartScheduler+0x88>)
 80017da:	f7ff fe8d 	bl	80014f8 <xTaskCreate>
 80017de:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80017e6:	f000 fe83 	bl	80024f0 <xTimerCreateTimerTask>
 80017ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d115      	bne.n	800181e <vTaskStartScheduler+0x5a>
 80017f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f6:	f383 8811 	msr	BASEPRI, r3
 80017fa:	f3bf 8f6f 	isb	sy
 80017fe:	f3bf 8f4f 	dsb	sy
 8001802:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <vTaskStartScheduler+0x8c>)
 8001806:	f04f 32ff 	mov.w	r2, #4294967295
 800180a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <vTaskStartScheduler+0x90>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <vTaskStartScheduler+0x94>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001818:	f7fe ff96 	bl	8000748 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800181c:	e00d      	b.n	800183a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001824:	d109      	bne.n	800183a <vTaskStartScheduler+0x76>
 8001826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182a:	f383 8811 	msr	BASEPRI, r3
 800182e:	f3bf 8f6f 	isb	sy
 8001832:	f3bf 8f4f 	dsb	sy
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	e7fe      	b.n	8001838 <vTaskStartScheduler+0x74>
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20001da4 	.word	0x20001da4
 8001848:	08004b88 	.word	0x08004b88
 800184c:	08002005 	.word	0x08002005
 8001850:	20001da0 	.word	0x20001da0
 8001854:	20001d8c 	.word	0x20001d8c
 8001858:	20001d84 	.word	0x20001d84

0800185c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <vTaskSuspendAll+0x18>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	4a03      	ldr	r2, [pc, #12]	; (8001874 <vTaskSuspendAll+0x18>)
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	20001da8 	.word	0x20001da8

08001878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001886:	4b41      	ldr	r3, [pc, #260]	; (800198c <xTaskResumeAll+0x114>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <xTaskResumeAll+0x2a>
 800188e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001892:	f383 8811 	msr	BASEPRI, r3
 8001896:	f3bf 8f6f 	isb	sy
 800189a:	f3bf 8f4f 	dsb	sy
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	e7fe      	b.n	80018a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80018a2:	f7fe ffdd 	bl	8000860 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <xTaskResumeAll+0x114>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	4a37      	ldr	r2, [pc, #220]	; (800198c <xTaskResumeAll+0x114>)
 80018ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <xTaskResumeAll+0x114>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d161      	bne.n	800197c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <xTaskResumeAll+0x118>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d05d      	beq.n	800197c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018c0:	e02e      	b.n	8001920 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <xTaskResumeAll+0x11c>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3318      	adds	r3, #24
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe93 	bl	80005fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3304      	adds	r3, #4
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe8e 	bl	80005fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	2201      	movs	r2, #1
 80018e4:	409a      	lsls	r2, r3
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <xTaskResumeAll+0x120>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <xTaskResumeAll+0x120>)
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4a27      	ldr	r2, [pc, #156]	; (800199c <xTaskResumeAll+0x124>)
 80018fe:	441a      	add	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3304      	adds	r3, #4
 8001904:	4619      	mov	r1, r3
 8001906:	4610      	mov	r0, r2
 8001908:	f7fe fe1a 	bl	8000540 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001910:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <xTaskResumeAll+0x128>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	429a      	cmp	r2, r3
 8001918:	d302      	bcc.n	8001920 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <xTaskResumeAll+0x12c>)
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001920:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <xTaskResumeAll+0x11c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1cc      	bne.n	80018c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800192e:	f000 fc0f 	bl	8002150 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <xTaskResumeAll+0x130>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800193e:	f000 f847 	bl	80019d0 <xTaskIncrementTick>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <xTaskResumeAll+0x12c>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3b01      	subs	r3, #1
 8001952:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f1      	bne.n	800193e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <xTaskResumeAll+0x130>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <xTaskResumeAll+0x12c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d009      	beq.n	800197c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001968:	2301      	movs	r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <xTaskResumeAll+0x134>)
 800196e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800197c:	f7fe ff9e 	bl	80008bc <vPortExitCritical>

	return xAlreadyYielded;
 8001980:	68bb      	ldr	r3, [r7, #8]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20001da8 	.word	0x20001da8
 8001990:	20001d80 	.word	0x20001d80
 8001994:	20001d40 	.word	0x20001d40
 8001998:	20001d88 	.word	0x20001d88
 800199c:	20001cac 	.word	0x20001cac
 80019a0:	20001ca8 	.word	0x20001ca8
 80019a4:	20001d94 	.word	0x20001d94
 80019a8:	20001d90 	.word	0x20001d90
 80019ac:	e000ed04 	.word	0xe000ed04

080019b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <xTaskGetTickCount+0x1c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20001d84 	.word	0x20001d84

080019d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019da:	4b50      	ldr	r3, [pc, #320]	; (8001b1c <xTaskIncrementTick+0x14c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f040 808c 	bne.w	8001afc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80019e4:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <xTaskIncrementTick+0x150>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80019ec:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <xTaskIncrementTick+0x150>)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d11f      	bne.n	8001a38 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80019f8:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <xTaskIncrementTick+0x154>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <xTaskIncrementTick+0x46>
 8001a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a06:	f383 8811 	msr	BASEPRI, r3
 8001a0a:	f3bf 8f6f 	isb	sy
 8001a0e:	f3bf 8f4f 	dsb	sy
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	e7fe      	b.n	8001a14 <xTaskIncrementTick+0x44>
 8001a16:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <xTaskIncrementTick+0x154>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <xTaskIncrementTick+0x158>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a40      	ldr	r2, [pc, #256]	; (8001b24 <xTaskIncrementTick+0x154>)
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4a40      	ldr	r2, [pc, #256]	; (8001b28 <xTaskIncrementTick+0x158>)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b40      	ldr	r3, [pc, #256]	; (8001b2c <xTaskIncrementTick+0x15c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4a3e      	ldr	r2, [pc, #248]	; (8001b2c <xTaskIncrementTick+0x15c>)
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	f000 fb8c 	bl	8002150 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a38:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <xTaskIncrementTick+0x160>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d34d      	bcc.n	8001ade <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a42:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <xTaskIncrementTick+0x154>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <xTaskIncrementTick+0x80>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <xTaskIncrementTick+0x82>
 8001a50:	2300      	movs	r3, #0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a56:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <xTaskIncrementTick+0x160>)
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	601a      	str	r2, [r3, #0]
					break;
 8001a5e:	e03e      	b.n	8001ade <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a60:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <xTaskIncrementTick+0x154>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d203      	bcs.n	8001a80 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a78:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <xTaskIncrementTick+0x160>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
						break;
 8001a7e:	e02e      	b.n	8001ade <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3304      	adds	r3, #4
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fdb8 	bl	80005fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3318      	adds	r3, #24
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fdaf 	bl	80005fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <xTaskIncrementTick+0x164>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <xTaskIncrementTick+0x164>)
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <xTaskIncrementTick+0x168>)
 8001abc:	441a      	add	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	f7fe fd3b 	bl	8000540 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <xTaskIncrementTick+0x16c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d3b4      	bcc.n	8001a42 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001adc:	e7b1      	b.n	8001a42 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <xTaskIncrementTick+0x16c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae4:	4914      	ldr	r1, [pc, #80]	; (8001b38 <xTaskIncrementTick+0x168>)
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d907      	bls.n	8001b06 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001af6:	2301      	movs	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e004      	b.n	8001b06 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <xTaskIncrementTick+0x170>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <xTaskIncrementTick+0x170>)
 8001b04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <xTaskIncrementTick+0x174>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001b12:	697b      	ldr	r3, [r7, #20]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20001da8 	.word	0x20001da8
 8001b20:	20001d84 	.word	0x20001d84
 8001b24:	20001d38 	.word	0x20001d38
 8001b28:	20001d3c 	.word	0x20001d3c
 8001b2c:	20001d98 	.word	0x20001d98
 8001b30:	20001da0 	.word	0x20001da0
 8001b34:	20001d88 	.word	0x20001d88
 8001b38:	20001cac 	.word	0x20001cac
 8001b3c:	20001ca8 	.word	0x20001ca8
 8001b40:	20001d90 	.word	0x20001d90
 8001b44:	20001d94 	.word	0x20001d94

08001b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b4e:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <vTaskSwitchContext+0xec>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <vTaskSwitchContext+0xf0>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001b5c:	e065      	b.n	8001c2a <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001b5e:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <vTaskSwitchContext+0xf0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <vTaskSwitchContext+0xf4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d111      	bne.n	8001ba0 <vTaskSwitchContext+0x58>
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d10b      	bne.n	8001ba0 <vTaskSwitchContext+0x58>
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	3308      	adds	r3, #8
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d105      	bne.n	8001ba0 <vTaskSwitchContext+0x58>
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	330c      	adds	r3, #12
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d008      	beq.n	8001bb2 <vTaskSwitchContext+0x6a>
 8001ba0:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <vTaskSwitchContext+0xf4>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <vTaskSwitchContext+0xf4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3334      	adds	r3, #52	; 0x34
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f001 fcbe 	bl	800352e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <vTaskSwitchContext+0xf8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
 8001bc2:	f1c3 031f 	rsb	r3, r3, #31
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	491e      	ldr	r1, [pc, #120]	; (8001c44 <vTaskSwitchContext+0xfc>)
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <vTaskSwitchContext+0xa8>
	__asm volatile
 8001bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be0:	f383 8811 	msr	BASEPRI, r3
 8001be4:	f3bf 8f6f 	isb	sy
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	e7fe      	b.n	8001bee <vTaskSwitchContext+0xa6>
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <vTaskSwitchContext+0xfc>)
 8001bfc:	4413      	add	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	3308      	adds	r3, #8
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d104      	bne.n	8001c20 <vTaskSwitchContext+0xd8>
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <vTaskSwitchContext+0xf4>)
 8001c28:	6013      	str	r3, [r2, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	3720      	adds	r7, #32
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20001da8 	.word	0x20001da8
 8001c38:	20001d94 	.word	0x20001d94
 8001c3c:	20001ca8 	.word	0x20001ca8
 8001c40:	20001d88 	.word	0x20001d88
 8001c44:	20001cac 	.word	0x20001cac

08001c48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <vTaskPlaceOnEventList+0x24>
 8001c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5c:	f383 8811 	msr	BASEPRI, r3
 8001c60:	f3bf 8f6f 	isb	sy
 8001c64:	f3bf 8f4f 	dsb	sy
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e7fe      	b.n	8001c6a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <vTaskPlaceOnEventList+0x44>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3318      	adds	r3, #24
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7fe fc87 	bl	8000588 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	6838      	ldr	r0, [r7, #0]
 8001c7e:	f000 fbd1 	bl	8002424 <prvAddCurrentTaskToDelayedList>
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20001ca8 	.word	0x20001ca8

08001c90 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <vTaskPlaceOnUnorderedEventList+0x26>
 8001ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca6:	f383 8811 	msr	BASEPRI, r3
 8001caa:	f3bf 8f6f 	isb	sy
 8001cae:	f3bf 8f4f 	dsb	sy
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e7fe      	b.n	8001cb4 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <vTaskPlaceOnUnorderedEventList+0x6c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <vTaskPlaceOnUnorderedEventList+0x42>
 8001cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc2:	f383 8811 	msr	BASEPRI, r3
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	e7fe      	b.n	8001cd0 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <vTaskPlaceOnUnorderedEventList+0x70>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cdc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <vTaskPlaceOnUnorderedEventList+0x70>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3318      	adds	r3, #24
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f7fe fc2a 	bl	8000540 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001cec:	2101      	movs	r1, #1
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fb98 	bl	8002424 <prvAddCurrentTaskToDelayedList>
}
 8001cf4:	bf00      	nop
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20001da8 	.word	0x20001da8
 8001d00:	20001ca8 	.word	0x20001ca8

08001d04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <vTaskPlaceOnEventListRestricted+0x26>
 8001d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1a:	f383 8811 	msr	BASEPRI, r3
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	f3bf 8f4f 	dsb	sy
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e7fe      	b.n	8001d28 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <vTaskPlaceOnEventListRestricted+0x50>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3318      	adds	r3, #24
 8001d30:	4619      	mov	r1, r3
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7fe fc04 	bl	8000540 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68b8      	ldr	r0, [r7, #8]
 8001d48:	f000 fb6c 	bl	8002424 <prvAddCurrentTaskToDelayedList>
	}
 8001d4c:	bf00      	nop
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20001ca8 	.word	0x20001ca8

08001d58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <xTaskRemoveFromEventList+0x2a>
 8001d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d72:	f383 8811 	msr	BASEPRI, r3
 8001d76:	f3bf 8f6f 	isb	sy
 8001d7a:	f3bf 8f4f 	dsb	sy
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	e7fe      	b.n	8001d80 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	3318      	adds	r3, #24
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fc37 	bl	80005fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <xTaskRemoveFromEventList+0xac>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d11c      	bne.n	8001dce <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fc2e 	bl	80005fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	2201      	movs	r2, #1
 8001da4:	409a      	lsls	r2, r3
 8001da6:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <xTaskRemoveFromEventList+0xb0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <xTaskRemoveFromEventList+0xb0>)
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <xTaskRemoveFromEventList+0xb4>)
 8001dbe:	441a      	add	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f7fe fbba 	bl	8000540 <vListInsertEnd>
 8001dcc:	e005      	b.n	8001dda <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	3318      	adds	r3, #24
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480e      	ldr	r0, [pc, #56]	; (8001e10 <xTaskRemoveFromEventList+0xb8>)
 8001dd6:	f7fe fbb3 	bl	8000540 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <xTaskRemoveFromEventList+0xbc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d905      	bls.n	8001df4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001de8:	2301      	movs	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <xTaskRemoveFromEventList+0xc0>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e001      	b.n	8001df8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001df8:	697b      	ldr	r3, [r7, #20]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20001da8 	.word	0x20001da8
 8001e08:	20001d88 	.word	0x20001d88
 8001e0c:	20001cac 	.word	0x20001cac
 8001e10:	20001d40 	.word	0x20001d40
 8001e14:	20001ca8 	.word	0x20001ca8
 8001e18:	20001d94 	.word	0x20001d94

08001e1c <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <xTaskRemoveFromUnorderedEventList+0xb8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <xTaskRemoveFromUnorderedEventList+0x26>
 8001e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e7fe      	b.n	8001e40 <xTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <xTaskRemoveFromUnorderedEventList+0x50>
 8001e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5c:	f383 8811 	msr	BASEPRI, r3
 8001e60:	f3bf 8f6f 	isb	sy
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	e7fe      	b.n	8001e6a <xTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7fe fbc4 	bl	80005fa <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	3304      	adds	r3, #4
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fbbf 	bl	80005fa <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	2201      	movs	r2, #1
 8001e82:	409a      	lsls	r2, r3
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <xTaskRemoveFromUnorderedEventList+0xbc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <xTaskRemoveFromUnorderedEventList+0xbc>)
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <xTaskRemoveFromUnorderedEventList+0xc0>)
 8001e9c:	441a      	add	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	f7fe fb4b 	bl	8000540 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <xTaskRemoveFromUnorderedEventList+0xc4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d905      	bls.n	8001ec4 <xTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <xTaskRemoveFromUnorderedEventList+0xc8>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e001      	b.n	8001ec8 <xTaskRemoveFromUnorderedEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001ec8:	697b      	ldr	r3, [r7, #20]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20001da8 	.word	0x20001da8
 8001ed8:	20001d88 	.word	0x20001d88
 8001edc:	20001cac 	.word	0x20001cac
 8001ee0:	20001ca8 	.word	0x20001ca8
 8001ee4:	20001d94 	.word	0x20001d94

08001ee8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <vTaskSetTimeOutState+0x22>
 8001ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efa:	f383 8811 	msr	BASEPRI, r3
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	f3bf 8f4f 	dsb	sy
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e7fe      	b.n	8001f08 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <vTaskSetTimeOutState+0x40>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <vTaskSetTimeOutState+0x44>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	605a      	str	r2, [r3, #4]
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20001d98 	.word	0x20001d98
 8001f2c:	20001d84 	.word	0x20001d84

08001f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <xTaskCheckForTimeOut+0x24>
 8001f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f44:	f383 8811 	msr	BASEPRI, r3
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e7fe      	b.n	8001f52 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <xTaskCheckForTimeOut+0x3e>
 8001f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5e:	f383 8811 	msr	BASEPRI, r3
 8001f62:	f3bf 8f6f 	isb	sy
 8001f66:	f3bf 8f4f 	dsb	sy
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	e7fe      	b.n	8001f6c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001f6e:	f7fe fc77 	bl	8000860 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <xTaskCheckForTimeOut+0xb4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d102      	bne.n	8001f88 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e026      	b.n	8001fd6 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <xTaskCheckForTimeOut+0xb8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d007      	beq.n	8001fa4 <xTaskCheckForTimeOut+0x74>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d802      	bhi.n	8001fa4 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e018      	b.n	8001fd6 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	1ad2      	subs	r2, r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d20e      	bcs.n	8001fd2 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1acb      	subs	r3, r1, r3
 8001fc0:	441a      	add	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ff8e 	bl	8001ee8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e001      	b.n	8001fd6 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001fd6:	f7fe fc71 	bl	80008bc <vPortExitCritical>

	return xReturn;
 8001fda:	697b      	ldr	r3, [r7, #20]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20001d84 	.word	0x20001d84
 8001fe8:	20001d98 	.word	0x20001d98

08001fec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <vTaskMissedYield+0x14>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20001d94 	.word	0x20001d94

08002004 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800200c:	f000 f854 	bl	80020b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <prvIdleTask+0x2c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d907      	bls.n	8002028 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <prvIdleTask+0x30>)
 800201a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002028:	f001 fa87 	bl	800353a <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800202c:	e7ee      	b.n	800200c <prvIdleTask+0x8>
 800202e:	bf00      	nop
 8002030:	20001cac 	.word	0x20001cac
 8002034:	e000ed04 	.word	0xe000ed04

08002038 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	e00c      	b.n	800205e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <prvInitialiseTaskLists+0x60>)
 8002050:	4413      	add	r3, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa47 	bl	80004e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3301      	adds	r3, #1
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b04      	cmp	r3, #4
 8002062:	d9ef      	bls.n	8002044 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <prvInitialiseTaskLists+0x64>)
 8002066:	f7fe fa3e 	bl	80004e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800206a:	480d      	ldr	r0, [pc, #52]	; (80020a0 <prvInitialiseTaskLists+0x68>)
 800206c:	f7fe fa3b 	bl	80004e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <prvInitialiseTaskLists+0x6c>)
 8002072:	f7fe fa38 	bl	80004e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002076:	480c      	ldr	r0, [pc, #48]	; (80020a8 <prvInitialiseTaskLists+0x70>)
 8002078:	f7fe fa35 	bl	80004e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800207c:	480b      	ldr	r0, [pc, #44]	; (80020ac <prvInitialiseTaskLists+0x74>)
 800207e:	f7fe fa32 	bl	80004e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <prvInitialiseTaskLists+0x78>)
 8002084:	4a05      	ldr	r2, [pc, #20]	; (800209c <prvInitialiseTaskLists+0x64>)
 8002086:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <prvInitialiseTaskLists+0x7c>)
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <prvInitialiseTaskLists+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20001cac 	.word	0x20001cac
 800209c:	20001d10 	.word	0x20001d10
 80020a0:	20001d24 	.word	0x20001d24
 80020a4:	20001d40 	.word	0x20001d40
 80020a8:	20001d54 	.word	0x20001d54
 80020ac:	20001d6c 	.word	0x20001d6c
 80020b0:	20001d38 	.word	0x20001d38
 80020b4:	20001d3c 	.word	0x20001d3c

080020b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020be:	e028      	b.n	8002112 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80020c0:	f7ff fbcc 	bl	800185c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <prvCheckTasksWaitingTermination+0x6c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80020d4:	f7ff fbd0 	bl	8001878 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d119      	bne.n	8002112 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80020de:	f7fe fbbf 	bl	8000860 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <prvCheckTasksWaitingTermination+0x6c>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	3304      	adds	r3, #4
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fa83 	bl	80005fa <uxListRemove>
					--uxCurrentNumberOfTasks;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <prvCheckTasksWaitingTermination+0x70>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <prvCheckTasksWaitingTermination+0x70>)
 80020fc:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <prvCheckTasksWaitingTermination+0x74>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3b01      	subs	r3, #1
 8002104:	4a09      	ldr	r2, [pc, #36]	; (800212c <prvCheckTasksWaitingTermination+0x74>)
 8002106:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002108:	f7fe fbd8 	bl	80008bc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800210c:	6838      	ldr	r0, [r7, #0]
 800210e:	f000 f80f 	bl	8002130 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <prvCheckTasksWaitingTermination+0x74>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1d2      	bne.n	80020c0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20001d54 	.word	0x20001d54
 8002128:	20001d80 	.word	0x20001d80
 800212c:	20001d68 	.word	0x20001d68

08002130 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fce9 	bl	8000b14 <vPortFree>
			vPortFree( pxTCB );
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe fce6 	bl	8000b14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <prvResetNextTaskUnblockTime+0x44>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <prvResetNextTaskUnblockTime+0x14>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <prvResetNextTaskUnblockTime+0x16>
 8002164:	2300      	movs	r3, #0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <prvResetNextTaskUnblockTime+0x48>)
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002172:	e008      	b.n	8002186 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <prvResetNextTaskUnblockTime+0x44>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <prvResetNextTaskUnblockTime+0x48>)
 8002184:	6013      	str	r3, [r2, #0]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20001d38 	.word	0x20001d38
 8002198:	20001da0 	.word	0x20001da0

0800219c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <xTaskGetSchedulerState+0x34>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80021aa:	2301      	movs	r3, #1
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	e008      	b.n	80021c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <xTaskGetSchedulerState+0x38>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80021b8:	2302      	movs	r3, #2
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	e001      	b.n	80021c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80021c2:	687b      	ldr	r3, [r7, #4]
	}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	20001d8c 	.word	0x20001d8c
 80021d4:	20001da8 	.word	0x20001da8

080021d8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d062      	beq.n	80022b0 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ee:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <vTaskPriorityInherit+0xe0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d25b      	bcs.n	80022b0 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db06      	blt.n	800220e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002200:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <vTaskPriorityInherit+0xe0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f1c3 0205 	rsb	r2, r3, #5
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6959      	ldr	r1, [r3, #20]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4a27      	ldr	r2, [pc, #156]	; (80022bc <vTaskPriorityInherit+0xe4>)
 8002220:	4413      	add	r3, r2
 8002222:	4299      	cmp	r1, r3
 8002224:	d101      	bne.n	800222a <vTaskPriorityInherit+0x52>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <vTaskPriorityInherit+0x54>
 800222a:	2300      	movs	r3, #0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d03a      	beq.n	80022a6 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3304      	adds	r3, #4
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f9e0 	bl	80005fa <uxListRemove>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d115      	bne.n	800226c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002244:	491d      	ldr	r1, [pc, #116]	; (80022bc <vTaskPriorityInherit+0xe4>)
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10a      	bne.n	800226c <vTaskPriorityInherit+0x94>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	2201      	movs	r2, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <vTaskPriorityInherit+0xe8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4013      	ands	r3, r2
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <vTaskPriorityInherit+0xe8>)
 800226a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <vTaskPriorityInherit+0xe0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	2201      	movs	r2, #1
 800227c:	409a      	lsls	r2, r3
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <vTaskPriorityInherit+0xe8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <vTaskPriorityInherit+0xe8>)
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4a09      	ldr	r2, [pc, #36]	; (80022bc <vTaskPriorityInherit+0xe4>)
 8002296:	441a      	add	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3304      	adds	r3, #4
 800229c:	4619      	mov	r1, r3
 800229e:	4610      	mov	r0, r2
 80022a0:	f7fe f94e 	bl	8000540 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80022a4:	e004      	b.n	80022b0 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <vTaskPriorityInherit+0xe0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20001ca8 	.word	0x20001ca8
 80022bc:	20001cac 	.word	0x20001cac
 80022c0:	20001d88 	.word	0x20001d88

080022c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d06c      	beq.n	80023b4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <xTaskPriorityDisinherit+0xfc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d009      	beq.n	80022f8 <xTaskPriorityDisinherit+0x34>
 80022e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e8:	f383 8811 	msr	BASEPRI, r3
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e7fe      	b.n	80022f6 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <xTaskPriorityDisinherit+0x50>
 8002300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002304:	f383 8811 	msr	BASEPRI, r3
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	e7fe      	b.n	8002312 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	1e5a      	subs	r2, r3, #1
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	429a      	cmp	r2, r3
 8002328:	d044      	beq.n	80023b4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	2b00      	cmp	r3, #0
 8002330:	d140      	bne.n	80023b4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3304      	adds	r3, #4
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f95f 	bl	80005fa <uxListRemove>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d115      	bne.n	800236e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002346:	491f      	ldr	r1, [pc, #124]	; (80023c4 <xTaskPriorityDisinherit+0x100>)
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <xTaskPriorityDisinherit+0xaa>
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	2201      	movs	r2, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <xTaskPriorityDisinherit+0x104>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4013      	ands	r3, r2
 800236a:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <xTaskPriorityDisinherit+0x104>)
 800236c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	f1c3 0205 	rsb	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	2201      	movs	r2, #1
 8002388:	409a      	lsls	r2, r3
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <xTaskPriorityDisinherit+0x104>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <xTaskPriorityDisinherit+0x104>)
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <xTaskPriorityDisinherit+0x100>)
 80023a2:	441a      	add	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	3304      	adds	r3, #4
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f7fe f8c8 	bl	8000540 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80023b0:	2301      	movs	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80023b4:	697b      	ldr	r3, [r7, #20]
	}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20001ca8 	.word	0x20001ca8
 80023c4:	20001cac 	.word	0x20001cac
 80023c8:	20001d88 	.word	0x20001d88

080023cc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <uxTaskResetEventItemValue+0x2c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <uxTaskResetEventItemValue+0x2c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <uxTaskResetEventItemValue+0x2c>)
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023e4:	f1c2 0205 	rsb	r2, r2, #5
 80023e8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80023ea:	687b      	ldr	r3, [r7, #4]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	20001ca8 	.word	0x20001ca8

080023fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <pvTaskIncrementMutexHeldCount+0x24>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <pvTaskIncrementMutexHeldCount+0x24>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800240e:	3201      	adds	r2, #1
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8002412:	4b03      	ldr	r3, [pc, #12]	; (8002420 <pvTaskIncrementMutexHeldCount+0x24>)
 8002414:	681b      	ldr	r3, [r3, #0]
	}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	20001ca8 	.word	0x20001ca8

08002424 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002434:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3304      	adds	r3, #4
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f8dd 	bl	80005fa <uxListRemove>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	2201      	movs	r2, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	4b21      	ldr	r3, [pc, #132]	; (80024dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4013      	ands	r3, r2
 800245a:	4a20      	ldr	r2, [pc, #128]	; (80024dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800245c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d10a      	bne.n	800247c <prvAddCurrentTaskToDelayedList+0x58>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3304      	adds	r3, #4
 8002472:	4619      	mov	r1, r3
 8002474:	481a      	ldr	r0, [pc, #104]	; (80024e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002476:	f7fe f863 	bl	8000540 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800247a:	e026      	b.n	80024ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d209      	bcs.n	80024a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3304      	adds	r3, #4
 800249e:	4619      	mov	r1, r3
 80024a0:	4610      	mov	r0, r2
 80024a2:	f7fe f871 	bl	8000588 <vListInsert>
}
 80024a6:	e010      	b.n	80024ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3304      	adds	r3, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f7fe f867 	bl	8000588 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d202      	bcs.n	80024ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80024c4:	4a09      	ldr	r2, [pc, #36]	; (80024ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6013      	str	r3, [r2, #0]
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20001d84 	.word	0x20001d84
 80024d8:	20001ca8 	.word	0x20001ca8
 80024dc:	20001d88 	.word	0x20001d88
 80024e0:	20001d6c 	.word	0x20001d6c
 80024e4:	20001d3c 	.word	0x20001d3c
 80024e8:	20001d38 	.word	0x20001d38
 80024ec:	20001da0 	.word	0x20001da0

080024f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80024fa:	f000 fadd 	bl	8002ab8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <xTimerCreateTimerTask+0x54>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <xTimerCreateTimerTask+0x58>)
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	2303      	movs	r3, #3
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	2300      	movs	r3, #0
 8002510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002514:	490d      	ldr	r1, [pc, #52]	; (800254c <xTimerCreateTimerTask+0x5c>)
 8002516:	480e      	ldr	r0, [pc, #56]	; (8002550 <xTimerCreateTimerTask+0x60>)
 8002518:	f7fe ffee 	bl	80014f8 <xTaskCreate>
 800251c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <xTimerCreateTimerTask+0x48>
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	e7fe      	b.n	8002536 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20001ddc 	.word	0x20001ddc
 8002548:	20001de0 	.word	0x20001de0
 800254c:	08004b90 	.word	0x08004b90
 8002550:	08002709 	.word	0x08002709

08002554 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002562:	2028      	movs	r0, #40	; 0x28
 8002564:	f7fe fa8c 	bl	8000a80 <pvPortMalloc>
 8002568:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f805 	bl	800258e <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8002584:	697b      	ldr	r3, [r7, #20]
	}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <prvInitialiseNewTimer+0x28>
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e7fe      	b.n	80025b4 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80025bc:	f000 fa7c 	bl	8002ab8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	6a3a      	ldr	r2, [r7, #32]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	3304      	adds	r3, #4
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd ff9f 	bl	8000526 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80025e8:	bf00      	nop
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <xTimerGenericCommand+0x2c>
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	e7fe      	b.n	800261a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <xTimerGenericCommand+0x94>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d02a      	beq.n	800267a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b05      	cmp	r3, #5
 8002634:	dc18      	bgt.n	8002668 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002636:	f7ff fdb1 	bl	800219c <xTaskGetSchedulerState>
 800263a:	4603      	mov	r3, r0
 800263c:	2b02      	cmp	r3, #2
 800263e:	d109      	bne.n	8002654 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <xTimerGenericCommand+0x94>)
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	f107 0114 	add.w	r1, r7, #20
 8002648:	2300      	movs	r3, #0
 800264a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800264c:	f7fe fb48 	bl	8000ce0 <xQueueGenericSend>
 8002650:	6278      	str	r0, [r7, #36]	; 0x24
 8002652:	e012      	b.n	800267a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <xTimerGenericCommand+0x94>)
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	f107 0114 	add.w	r1, r7, #20
 800265c:	2300      	movs	r3, #0
 800265e:	2200      	movs	r2, #0
 8002660:	f7fe fb3e 	bl	8000ce0 <xQueueGenericSend>
 8002664:	6278      	str	r0, [r7, #36]	; 0x24
 8002666:	e008      	b.n	800267a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <xTimerGenericCommand+0x94>)
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	f107 0114 	add.w	r1, r7, #20
 8002670:	2300      	movs	r3, #0
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	f7fe fc2e 	bl	8000ed4 <xQueueGenericSendFromISR>
 8002678:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800267c:	4618      	mov	r0, r3
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20001ddc 	.word	0x20001ddc

08002688 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af02      	add	r7, sp, #8
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <prvProcessExpiredTimer+0x7c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3304      	adds	r3, #4
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ffaa 	bl	80005fa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d121      	bne.n	80026f2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	18d1      	adds	r1, r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f000 f8c8 	bl	8002850 <prvInsertTimerInActiveList>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d015      	beq.n	80026f2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80026c6:	2300      	movs	r3, #0
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2300      	movs	r3, #0
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	2100      	movs	r1, #0
 80026d0:	6978      	ldr	r0, [r7, #20]
 80026d2:	f7ff ff8d 	bl	80025f0 <xTimerGenericCommand>
 80026d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <prvProcessExpiredTimer+0x6a>
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	e7fe      	b.n	80026f0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	4798      	blx	r3
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20001dd4 	.word	0x20001dd4

08002708 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	4618      	mov	r0, r3
 8002716:	f000 f857 	bl	80027c8 <prvGetNextExpireTime>
 800271a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4619      	mov	r1, r3
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f803 	bl	800272c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002726:	f000 f8d5 	bl	80028d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800272a:	e7f1      	b.n	8002710 <prvTimerTask+0x8>

0800272c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002736:	f7ff f891 	bl	800185c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800273a:	f107 0308 	add.w	r3, r7, #8
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f866 	bl	8002810 <prvSampleTimeNow>
 8002744:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d130      	bne.n	80027ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <prvProcessTimerOrBlockTask+0x3c>
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	429a      	cmp	r2, r3
 8002758:	d806      	bhi.n	8002768 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800275a:	f7ff f88d 	bl	8001878 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800275e:	68f9      	ldr	r1, [r7, #12]
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ff91 	bl	8002688 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002766:	e024      	b.n	80027b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <prvProcessTimerOrBlockTask+0x90>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <prvProcessTimerOrBlockTask+0x94>)
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	f7fe fe7f 	bl	8001490 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002792:	f7ff f871 	bl	8001878 <xTaskResumeAll>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <prvProcessTimerOrBlockTask+0x98>)
 800279e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	f3bf 8f6f 	isb	sy
}
 80027ac:	e001      	b.n	80027b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80027ae:	f7ff f863 	bl	8001878 <xTaskResumeAll>
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20001dd8 	.word	0x20001dd8
 80027c0:	20001ddc 	.word	0x20001ddc
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <prvGetNextExpireTime+0x44>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <prvGetNextExpireTime+0x44>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e001      	b.n	80027fe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	20001dd4 	.word	0x20001dd4

08002810 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002818:	f7ff f8ca 	bl	80019b0 <xTaskGetTickCount>
 800281c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <prvSampleTimeNow+0x3c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	429a      	cmp	r2, r3
 8002826:	d205      	bcs.n	8002834 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002828:	f000 f8e6 	bl	80029f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e002      	b.n	800283a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800283a:	4a04      	ldr	r2, [pc, #16]	; (800284c <prvSampleTimeNow+0x3c>)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002840:	68fb      	ldr	r3, [r7, #12]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20001de4 	.word	0x20001de4

08002850 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	429a      	cmp	r2, r3
 8002874:	d812      	bhi.n	800289c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	1ad2      	subs	r2, r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	429a      	cmp	r2, r3
 8002882:	d302      	bcc.n	800288a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002884:	2301      	movs	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e01b      	b.n	80028c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <prvInsertTimerInActiveList+0x7c>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3304      	adds	r3, #4
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f7fd fe77 	bl	8000588 <vListInsert>
 800289a:	e012      	b.n	80028c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d206      	bcs.n	80028b2 <prvInsertTimerInActiveList+0x62>
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d302      	bcc.n	80028b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	e007      	b.n	80028c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <prvInsertTimerInActiveList+0x80>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3304      	adds	r3, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f7fd fe63 	bl	8000588 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80028c2:	697b      	ldr	r3, [r7, #20]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20001dd8 	.word	0x20001dd8
 80028d0:	20001dd4 	.word	0x20001dd4

080028d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	; 0x30
 80028d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80028da:	e07a      	b.n	80029d2 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db77      	blt.n	80029d2 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	3304      	adds	r3, #4
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fe81 	bl	80005fa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff88 	bl	8002810 <prvSampleTimeNow>
 8002900:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b09      	cmp	r3, #9
 8002906:	d863      	bhi.n	80029d0 <prvProcessReceivedCommands+0xfc>
 8002908:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <prvProcessReceivedCommands+0x3c>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002939 	.word	0x08002939
 8002914:	08002939 	.word	0x08002939
 8002918:	08002939 	.word	0x08002939
 800291c:	080029d3 	.word	0x080029d3
 8002920:	08002993 	.word	0x08002993
 8002924:	080029c9 	.word	0x080029c9
 8002928:	08002939 	.word	0x08002939
 800292c:	08002939 	.word	0x08002939
 8002930:	080029d3 	.word	0x080029d3
 8002934:	08002993 	.word	0x08002993
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	18d1      	adds	r1, r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a3a      	ldr	r2, [r7, #32]
 8002944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002946:	f7ff ff83 	bl	8002850 <prvInsertTimerInActiveList>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d040      	beq.n	80029d2 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002956:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d138      	bne.n	80029d2 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	441a      	add	r2, r3
 8002968:	2300      	movs	r3, #0
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2300      	movs	r3, #0
 800296e:	2100      	movs	r1, #0
 8002970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002972:	f7ff fe3d 	bl	80025f0 <xTimerGenericCommand>
 8002976:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d129      	bne.n	80029d2 <prvProcessReceivedCommands+0xfe>
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	e7fe      	b.n	8002990 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <prvProcessReceivedCommands+0xe0>
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e7fe      	b.n	80029b2 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	18d1      	adds	r1, r2, r3
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	6a3a      	ldr	r2, [r7, #32]
 80029c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c2:	f7ff ff45 	bl	8002850 <prvInsertTimerInActiveList>
					break;
 80029c6:	e004      	b.n	80029d2 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80029c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029ca:	f7fe f8a3 	bl	8000b14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80029ce:	e000      	b.n	80029d2 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 80029d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <prvProcessReceivedCommands+0x120>)
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	f107 0108 	add.w	r1, r7, #8
 80029da:	2300      	movs	r3, #0
 80029dc:	2200      	movs	r2, #0
 80029de:	f7fe fb0d 	bl	8000ffc <xQueueGenericReceive>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f af79 	bne.w	80028dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80029ea:	bf00      	nop
 80029ec:	3728      	adds	r7, #40	; 0x28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20001ddc 	.word	0x20001ddc

080029f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029fe:	e044      	b.n	8002a8a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <prvSwitchTimerLists+0xb8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a0a:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <prvSwitchTimerLists+0xb8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fdee 	bl	80005fa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	6938      	ldr	r0, [r7, #16]
 8002a24:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d12d      	bne.n	8002a8a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4413      	add	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d90e      	bls.n	8002a5e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <prvSwitchTimerLists+0xb8>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f7fd fd96 	bl	8000588 <vListInsert>
 8002a5c:	e015      	b.n	8002a8a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2300      	movs	r3, #0
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	2100      	movs	r1, #0
 8002a68:	6938      	ldr	r0, [r7, #16]
 8002a6a:	f7ff fdc1 	bl	80025f0 <xTimerGenericCommand>
 8002a6e:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <prvSwitchTimerLists+0x92>
 8002a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7a:	f383 8811 	msr	BASEPRI, r3
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	e7fe      	b.n	8002a88 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <prvSwitchTimerLists+0xb8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1b5      	bne.n	8002a00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <prvSwitchTimerLists+0xb8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <prvSwitchTimerLists+0xbc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <prvSwitchTimerLists+0xb8>)
 8002aa0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <prvSwitchTimerLists+0xbc>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20001dd4 	.word	0x20001dd4
 8002ab4:	20001dd8 	.word	0x20001dd8

08002ab8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002abc:	f7fd fed0 	bl	8000860 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <prvCheckForValidListAndQueue+0x54>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11d      	bne.n	8002b04 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002ac8:	4811      	ldr	r0, [pc, #68]	; (8002b10 <prvCheckForValidListAndQueue+0x58>)
 8002aca:	f7fd fd0c 	bl	80004e6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002ace:	4811      	ldr	r0, [pc, #68]	; (8002b14 <prvCheckForValidListAndQueue+0x5c>)
 8002ad0:	f7fd fd09 	bl	80004e6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <prvCheckForValidListAndQueue+0x60>)
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <prvCheckForValidListAndQueue+0x58>)
 8002ad8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <prvCheckForValidListAndQueue+0x64>)
 8002adc:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <prvCheckForValidListAndQueue+0x5c>)
 8002ade:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	210c      	movs	r1, #12
 8002ae4:	2005      	movs	r0, #5
 8002ae6:	f7fe f8a3 	bl	8000c30 <xQueueGenericCreate>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <prvCheckForValidListAndQueue+0x54>)
 8002aee:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <prvCheckForValidListAndQueue+0x54>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <prvCheckForValidListAndQueue+0x54>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4908      	ldr	r1, [pc, #32]	; (8002b20 <prvCheckForValidListAndQueue+0x68>)
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fc9e 	bl	8001440 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b04:	f7fd feda 	bl	80008bc <vPortExitCritical>
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20001ddc 	.word	0x20001ddc
 8002b10:	20001dac 	.word	0x20001dac
 8002b14:	20001dc0 	.word	0x20001dc0
 8002b18:	20001dd4 	.word	0x20001dd4
 8002b1c:	20001dd8 	.word	0x20001dd8
 8002b20:	08004b98 	.word	0x08004b98

08002b24 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b46:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	791b      	ldrb	r3, [r3, #4]
 8002b4c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002b52:	4313      	orrs	r3, r2
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <ADC_Init+0xa8>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002b76:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002b7c:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	795b      	ldrb	r3, [r3, #5]
 8002b82:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002b84:	4313      	orrs	r3, r2
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	7d1b      	ldrb	r3, [r3, #20]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	051b      	lsls	r3, r3, #20
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	c0fff7fd 	.word	0xc0fff7fd

08002bd0 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8002bee:	e005      	b.n	8002bfc <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 0201 	bic.w	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	70fb      	strb	r3, [r7, #3]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	70bb      	strb	r3, [r7, #2]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	2b09      	cmp	r3, #9
 8002c2e:	d923      	bls.n	8002c78 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	f1a3 020a 	sub.w	r2, r3, #10
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	2207      	movs	r2, #7
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4013      	ands	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8002c54:	7879      	ldrb	r1, [r7, #1]
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	f1a3 020a 	sub.w	r2, r3, #10
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	e01e      	b.n	8002cb6 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	2207      	movs	r2, #7
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4013      	ands	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8002c98:	7879      	ldrb	r1, [r7, #1]
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8002cb6:	78bb      	ldrb	r3, [r7, #2]
 8002cb8:	2b06      	cmp	r3, #6
 8002cba:	d821      	bhi.n	8002d00 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8002cc2:	78bb      	ldrb	r3, [r7, #2]
 8002cc4:	1e5a      	subs	r2, r3, #1
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	221f      	movs	r2, #31
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8002cde:	78f9      	ldrb	r1, [r7, #3]
 8002ce0:	78bb      	ldrb	r3, [r7, #2]
 8002ce2:	1e5a      	subs	r2, r3, #1
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8002cfe:	e047      	b.n	8002d90 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8002d00:	78bb      	ldrb	r3, [r7, #2]
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d821      	bhi.n	8002d4a <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8002d0c:	78bb      	ldrb	r3, [r7, #2]
 8002d0e:	1fda      	subs	r2, r3, #7
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	221f      	movs	r2, #31
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8002d28:	78f9      	ldrb	r1, [r7, #3]
 8002d2a:	78bb      	ldrb	r3, [r7, #2]
 8002d2c:	1fda      	subs	r2, r3, #7
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d48:	e022      	b.n	8002d90 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8002d50:	78bb      	ldrb	r3, [r7, #2]
 8002d52:	f1a3 020d 	sub.w	r2, r3, #13
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	221f      	movs	r2, #31
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8002d6e:	78f9      	ldrb	r1, [r7, #3]
 8002d70:	78bb      	ldrb	r3, [r7, #2]
 8002d72:	f1a3 020d 	sub.w	r2, r3, #13
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	609a      	str	r2, [r3, #8]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc8:	b29b      	uxth	r3, r3
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	e001      	b.n	8002dfc <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <DAC_SetChannel1Data+0x34>)
 8002e1e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	3308      	adds	r3, #8
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	6013      	str	r3, [r2, #0]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40007400 	.word	0x40007400

08002e44 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <DMA_Init+0xac>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e6e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e7a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e86:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e92:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0307 	bic.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60da      	str	r2, [r3, #12]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	f01c803f 	.word	0xf01c803f

08002ef4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d006      	beq.n	8002f14 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f043 0201 	orr.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002f12:	e005      	b.n	8002f20 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 0201 	bic.w	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e001      	b.n	8002f4e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <DMA_GetFlagStatus+0x6c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d802      	bhi.n	8002f7c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <DMA_GetFlagStatus+0x70>)
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	e001      	b.n	8002f80 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <DMA_GetFlagStatus+0x74>)
 8002f7e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e002      	b.n	8002f98 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002f9e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
 8002fb2:	e001      	b.n	8002fb8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	4002640f 	.word	0x4002640f
 8002fcc:	40026000 	.word	0x40026000
 8002fd0:	40026400 	.word	0x40026400

08002fd4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a10      	ldr	r2, [pc, #64]	; (8003024 <DMA_ClearFlag+0x50>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d802      	bhi.n	8002fec <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <DMA_ClearFlag+0x54>)
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	e001      	b.n	8002ff0 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <DMA_ClearFlag+0x58>)
 8002fee:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003000:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8003008:	e006      	b.n	8003018 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003010:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	6093      	str	r3, [r2, #8]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	4002640f 	.word	0x4002640f
 8003028:	40026000 	.word	0x40026000
 800302c:	40026400 	.word	0x40026400

08003030 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e076      	b.n	800313a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800304c:	2201      	movs	r2, #1
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d165      	bne.n	8003134 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2103      	movs	r1, #3
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	401a      	ands	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	791b      	ldrb	r3, [r3, #4]
 8003086:	4619      	mov	r1, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	791b      	ldrb	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d003      	beq.n	80030a6 <GPIO_Init+0x76>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	791b      	ldrb	r3, [r3, #4]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d12e      	bne.n	8003104 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2103      	movs	r1, #3
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	795b      	ldrb	r3, [r3, #5]
 80030c4:	4619      	mov	r1, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4619      	mov	r1, r3
 80030de:	2301      	movs	r3, #1
 80030e0:	408b      	lsls	r3, r1
 80030e2:	43db      	mvns	r3, r3
 80030e4:	401a      	ands	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	7992      	ldrb	r2, [r2, #6]
 80030f2:	4611      	mov	r1, r2
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	b292      	uxth	r2, r2
 80030f8:	fa01 f202 	lsl.w	r2, r1, r2
 80030fc:	b292      	uxth	r2, r2
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	b29b      	uxth	r3, r3
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2103      	movs	r1, #3
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	401a      	ands	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	79db      	ldrb	r3, [r3, #7]
 8003124:	4619      	mov	r1, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3301      	adds	r3, #1
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d985      	bls.n	800304c <GPIO_Init+0x1c>
    }
  }
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	831a      	strh	r2, [r3, #24]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	887a      	ldrh	r2, [r7, #2]
 800317a:	835a      	strh	r2, [r3, #26]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d006      	beq.n	80031a8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800319a:	490a      	ldr	r1, [pc, #40]	; (80031c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800319e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80031a6:	e006      	b.n	80031b6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80031a8:	4906      	ldr	r1, [pc, #24]	; (80031c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80031ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	4013      	ands	r3, r2
 80031b4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80031da:	490a      	ldr	r1, [pc, #40]	; (8003204 <RCC_AHB2PeriphClockCmd+0x3c>)
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <RCC_AHB2PeriphClockCmd+0x3c>)
 80031de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 80031e6:	e006      	b.n	80031f6 <RCC_AHB2PeriphClockCmd+0x2e>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80031e8:	4906      	ldr	r1, [pc, #24]	; (8003204 <RCC_AHB2PeriphClockCmd+0x3c>)
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <RCC_AHB2PeriphClockCmd+0x3c>)
 80031ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	4013      	ands	r3, r2
 80031f4:	634b      	str	r3, [r1, #52]	; 0x34
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800

08003208 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d006      	beq.n	8003228 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <RCC_APB2PeriphClockCmd+0x3c>)
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <RCC_APB2PeriphClockCmd+0x3c>)
 800321e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4313      	orrs	r3, r2
 8003224:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8003226:	e006      	b.n	8003236 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003228:	4906      	ldr	r1, [pc, #24]	; (8003244 <RCC_APB2PeriphClockCmd+0x3c>)
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <RCC_APB2PeriphClockCmd+0x3c>)
 800322c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	43db      	mvns	r3, r3
 8003232:	4013      	ands	r3, r2
 8003234:	644b      	str	r3, [r1, #68]	; 0x44
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d006      	beq.n	8003266 <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8003258:	4a09      	ldr	r2, [pc, #36]	; (8003280 <RNG_Cmd+0x38>)
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <RNG_Cmd+0x38>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
 8003264:	e005      	b.n	8003272 <RNG_Cmd+0x2a>
    RNG->CR &= ~RNG_CR_RNGEN;
 8003266:	4a06      	ldr	r2, [pc, #24]	; (8003280 <RNG_Cmd+0x38>)
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <RNG_Cmd+0x38>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	6013      	str	r3, [r2, #0]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	50060800 	.word	0x50060800

08003284 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <RNG_GetFlagStatus+0x34>)
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	e001      	b.n	80032a8 <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 80032a4:	2300      	movs	r3, #0
 80032a6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	50060800 	.word	0x50060800

080032bc <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	819a      	strh	r2, [r3, #12]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	891b      	ldrh	r3, [r3, #8]
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	887b      	ldrh	r3, [r7, #2]
 80032f2:	4013      	ands	r3, r2
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80032fa:	2301      	movs	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	e001      	b.n	8003304 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8003318:	4b38      	ldr	r3, [pc, #224]	; (80033fc <Audio_MAL_IRQHandler+0xe8>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b38      	ldr	r3, [pc, #224]	; (8003400 <Audio_MAL_IRQHandler+0xec>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f7ff fe1a 	bl	8002f5c <DMA_GetFlagStatus>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d064      	beq.n	80033f8 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800332e:	4b35      	ldr	r3, [pc, #212]	; (8003404 <Audio_MAL_IRQHandler+0xf0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d04c      	beq.n	80033d0 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8003336:	bf00      	nop
 8003338:	4b30      	ldr	r3, [pc, #192]	; (80033fc <Audio_MAL_IRQHandler+0xe8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fdf5 	bl	8002f2c <DMA_GetCmdStatus>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f7      	bne.n	8003338 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8003348:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <Audio_MAL_IRQHandler+0xe8>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <Audio_MAL_IRQHandler+0xec>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f7ff fe3e 	bl	8002fd4 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8003358:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <Audio_MAL_IRQHandler+0xf4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	4b2b      	ldr	r3, [pc, #172]	; (800340c <Audio_MAL_IRQHandler+0xf8>)
 8003360:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8003362:	4b28      	ldr	r3, [pc, #160]	; (8003404 <Audio_MAL_IRQHandler+0xf0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800336a:	4293      	cmp	r3, r2
 800336c:	bf28      	it	cs
 800336e:	4613      	movcs	r3, r2
 8003370:	4a26      	ldr	r2, [pc, #152]	; (800340c <Audio_MAL_IRQHandler+0xf8>)
 8003372:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003374:	4b21      	ldr	r3, [pc, #132]	; (80033fc <Audio_MAL_IRQHandler+0xe8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4924      	ldr	r1, [pc, #144]	; (800340c <Audio_MAL_IRQHandler+0xf8>)
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fd62 	bl	8002e44 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <Audio_MAL_IRQHandler+0xe8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fdb4 	bl	8002ef4 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 800338c:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <Audio_MAL_IRQHandler+0xf4>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <Audio_MAL_IRQHandler+0xf0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d203      	bcs.n	80033a2 <Audio_MAL_IRQHandler+0x8e>
 800339a:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <Audio_MAL_IRQHandler+0xf0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	e000      	b.n	80033a4 <Audio_MAL_IRQHandler+0x90>
 80033a2:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <Audio_MAL_IRQHandler+0xfc>)
 80033a4:	4413      	add	r3, r2
 80033a6:	4a18      	ldr	r2, [pc, #96]	; (8003408 <Audio_MAL_IRQHandler+0xf4>)
 80033a8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80033aa:	4b16      	ldr	r3, [pc, #88]	; (8003404 <Audio_MAL_IRQHandler+0xf0>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <Audio_MAL_IRQHandler+0xf0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033b6:	428b      	cmp	r3, r1
 80033b8:	bf28      	it	cs
 80033ba:	460b      	movcs	r3, r1
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	4a11      	ldr	r2, [pc, #68]	; (8003404 <Audio_MAL_IRQHandler+0xf0>)
 80033c0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <Audio_MAL_IRQHandler+0xe8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fd93 	bl	8002ef4 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80033ce:	e013      	b.n	80033f8 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <Audio_MAL_IRQHandler+0xe8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fd8c 	bl	8002ef4 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <Audio_MAL_IRQHandler+0xe8>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b07      	ldr	r3, [pc, #28]	; (8003400 <Audio_MAL_IRQHandler+0xec>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f7ff fdf4 	bl	8002fd4 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <Audio_MAL_IRQHandler+0xf4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f83c 	bl	8003470 <EVAL_AUDIO_TransferComplete_CallBack>
}
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	2000000c 	.word	0x2000000c
 8003400:	20000010 	.word	0x20000010
 8003404:	20000004 	.word	0x20000004
 8003408:	20001e34 	.word	0x20001e34
 800340c:	20001e74 	.word	0x20001e74
 8003410:	0001fffe 	.word	0x0001fffe

08003414 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003418:	f7ff ff7c 	bl	8003314 <Audio_MAL_IRQHandler>
}
 800341c:	bf00      	nop
 800341e:	bd80      	pop	{r7, pc}

08003420 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003424:	f7ff ff76 	bl	8003314 <Audio_MAL_IRQHandler>
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}

0800342c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003430:	2102      	movs	r1, #2
 8003432:	480d      	ldr	r0, [pc, #52]	; (8003468 <SPI3_IRQHandler+0x3c>)
 8003434:	f7ff ff51 	bl	80032da <SPI_I2S_GetFlagStatus>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d011      	beq.n	8003462 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <SPI3_IRQHandler+0x40>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d106      	bne.n	8003454 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8003446:	f000 f81e 	bl	8003486 <EVAL_AUDIO_GetSampleCallBack>
 800344a:	4603      	mov	r3, r0
 800344c:	4619      	mov	r1, r3
 800344e:	2004      	movs	r0, #4
 8003450:	f7ff fcdc 	bl	8002e0c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8003454:	f000 f817 	bl	8003486 <EVAL_AUDIO_GetSampleCallBack>
 8003458:	4603      	mov	r3, r0
 800345a:	4619      	mov	r1, r3
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <SPI3_IRQHandler+0x3c>)
 800345e:	f7ff ff2d 	bl	80032bc <SPI_I2S_SendData>
  }
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40003c00 	.word	0x40003c00
 800346c:	20000008 	.word	0x20000008

08003470 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800347a:	bf00      	nop
}
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <main>:


/*-----------------------------------------------------------*/

int main(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
	// ==> GPIO initialization
	sys_GPIO_init();
 800349c:	f000 f902 	bl	80036a4 <sys_GPIO_init>

	// ==> ADC initialization
	sys_ADC_init();
 80034a0:	f000 f94c 	bl	800373c <sys_ADC_init>

	// ==> RTOS SW Timer initialization
	my_SW_TIM_Init();
 80034a4:	f000 fb58 	bl	8003b58 <my_SW_TIM_Init>

	// ==> RTOS Task initialization
	my_TASK_Init();
 80034a8:	f000 fae8 	bl	8003a7c <my_TASK_Init>


	/* Start the tasks and timer running. */
	printf("~~~ PROGRAM START ~~~\n");
 80034ac:	4806      	ldr	r0, [pc, #24]	; (80034c8 <main+0x30>)
 80034ae:	f000 ff59 	bl	8004364 <puts>
	printf("==> Starting Scheduler...\n");
 80034b2:	4806      	ldr	r0, [pc, #24]	; (80034cc <main+0x34>)
 80034b4:	f000 ff56 	bl	8004364 <puts>

	vTaskStartScheduler();
 80034b8:	f7fe f984 	bl	80017c4 <vTaskStartScheduler>

	printf("WARNING!! Main Exiting...\n");
 80034bc:	4804      	ldr	r0, [pc, #16]	; (80034d0 <main+0x38>)
 80034be:	f000 ff51 	bl	8004364 <puts>
	return 0;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	08004ba0 	.word	0x08004ba0
 80034cc:	08004bb8 	.word	0x08004bb8
 80034d0:	08004bd4 	.word	0x08004bd4

080034d4 <ADC_IRQHandler>:


/// =========================

void ADC_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
	uint16_t adc_value = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	80fb      	strh	r3, [r7, #6]
	//portBASE_TYPE xHigherPriorityTaskWoken;

	// ==> Check if ADC EOC is indeed finished.
	if (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC))
 80034de:	2102      	movs	r1, #2
 80034e0:	480f      	ldr	r0, [pc, #60]	; (8003520 <ADC_IRQHandler+0x4c>)
 80034e2:	f7ff fc78 	bl	8002dd6 <ADC_GetFlagStatus>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <ADC_IRQHandler+0x44>
	{
		// ==> Retrieved value is between [0, 4096]
		adc_value = ADC_GetConversionValue(ADC1);
 80034ec:	480c      	ldr	r0, [pc, #48]	; (8003520 <ADC_IRQHandler+0x4c>)
 80034ee:	f7ff fc65 	bl	8002dbc <ADC_GetConversionValue>
 80034f2:	4603      	mov	r3, r0
 80034f4:	80fb      	strh	r3, [r7, #6]

		controlADC.flowRate = adc_value / 32;
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003502:	b2d9      	uxtb	r1, r3
 8003504:	4a07      	ldr	r2, [pc, #28]	; (8003524 <ADC_IRQHandler+0x50>)
 8003506:	8813      	ldrh	r3, [r2, #0]
 8003508:	f361 0306 	bfi	r3, r1, #0, #7
 800350c:	8013      	strh	r3, [r2, #0]
		controlADC.adcStatus = ADC_CONVERSION_OFF;
 800350e:	4a05      	ldr	r2, [pc, #20]	; (8003524 <ADC_IRQHandler+0x50>)
 8003510:	8813      	ldrh	r3, [r2, #0]
 8003512:	f36f 33cf 	bfc	r3, #15, #1
 8003516:	8013      	strh	r3, [r2, #0]
	}
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40012000 	.word	0x40012000
 8003524:	20001eb0 	.word	0x20001eb0

08003528 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 800352c:	e7fe      	b.n	800352c <vApplicationMallocFailedHook+0x4>

0800352e <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8003538:	e7fe      	b.n	8003538 <vApplicationStackOverflowHook+0xa>

0800353a <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003540:	f7fd fb00 	bl	8000b44 <xPortGetFreeHeapSize>
 8003544:	4603      	mov	r3, r0
 8003546:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8003548:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003554:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003556:	e003      	b.n	8003560 <LoopCopyDataInit>

08003558 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800355a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800355c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800355e:	3104      	adds	r1, #4

08003560 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003560:	480a      	ldr	r0, [pc, #40]	; (800358c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003564:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003566:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003568:	d3f6      	bcc.n	8003558 <CopyDataInit>
  ldr  r2, =_sbss
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800356c:	e002      	b.n	8003574 <LoopFillZerobss>

0800356e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800356e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003570:	f842 3b04 	str.w	r3, [r2], #4

08003574 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003576:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003578:	d3f9      	bcc.n	800356e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800357a:	f000 fbed 	bl	8003d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800357e:	f000 fe5d 	bl	800423c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003582:	f7ff ff89 	bl	8003498 <main>
  bx  lr    
 8003586:	4770      	bx	lr
  ldr  r3, =_sidata
 8003588:	08004d38 	.word	0x08004d38
  ldr  r0, =_sdata
 800358c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003590:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8003594:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003598:	20001ec8 	.word	0x20001ec8

0800359c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800359c:	e7fe      	b.n	800359c <CAN1_RX0_IRQHandler>

0800359e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80035b0:	e7fe      	b.n	80035b0 <HardFault_Handler+0x4>

080035b2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80035b6:	e7fe      	b.n	80035b6 <MemManage_Handler+0x4>

080035b8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80035bc:	e7fe      	b.n	80035bc <BusFault_Handler+0x4>

080035be <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80035be:	b480      	push	{r7}
 80035c0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80035c2:	e7fe      	b.n	80035c2 <UsageFault_Handler+0x4>

080035c4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <NVIC_SetPriorityGrouping+0x44>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80035fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003606:	4a04      	ldr	r2, [pc, #16]	; (8003618 <NVIC_SetPriorityGrouping+0x44>)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	60d3      	str	r3, [r2, #12]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8003626:	4909      	ldr	r1, [pc, #36]	; (800364c <NVIC_EnableIRQ+0x30>)
 8003628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	79fa      	ldrb	r2, [r7, #7]
 8003630:	f002 021f 	and.w	r2, r2, #31
 8003634:	2001      	movs	r0, #1
 8003636:	fa00 f202 	lsl.w	r2, r0, r2
 800363a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	e000e100 	.word	0xe000e100

08003650 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	6039      	str	r1, [r7, #0]
 800365a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003660:	2b00      	cmp	r3, #0
 8003662:	da0b      	bge.n	800367c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8003664:	490d      	ldr	r1, [pc, #52]	; (800369c <NVIC_SetPriority+0x4c>)
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	3b04      	subs	r3, #4
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	0112      	lsls	r2, r2, #4
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	440b      	add	r3, r1
 8003678:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800367a:	e009      	b.n	8003690 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800367c:	4908      	ldr	r1, [pc, #32]	; (80036a0 <NVIC_SetPriority+0x50>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	0112      	lsls	r2, r2, #4
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	440b      	add	r3, r1
 800368c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00
 80036a0:	e000e100 	.word	0xe000e100

080036a4 <sys_GPIO_init>:

void sys_GPIO_init( void );
void sys_ADC_init( void);

void sys_GPIO_init( void )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 80036aa:	2000      	movs	r0, #0
 80036ac:	f7ff ff92 	bl	80035d4 <NVIC_SetPriorityGrouping>

	// -->  Enable the GPIO AHB clock for PORT C
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80036b0:	2101      	movs	r1, #1
 80036b2:	2004      	movs	r0, #4
 80036b4:	f7ff fd68 	bl	8003188 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructureLED;
	GPIO_InitTypeDef GPIO_InitStructureShift;

	GPIO_InitStructureLED.GPIO_Pin 		= GPIO_LED_RED | GPIO_LED_YELLOW | GPIO_LED_GREEN;
 80036b8:	2307      	movs	r3, #7
 80036ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructureLED.GPIO_Mode 	= GPIO_Mode_OUT;
 80036bc:	2301      	movs	r3, #1
 80036be:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructureLED.GPIO_OType 	= GPIO_OType_PP;
 80036c0:	2300      	movs	r3, #0
 80036c2:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructureLED.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructureLED.GPIO_Speed    = GPIO_Speed_25MHz;
 80036c8:	2301      	movs	r3, #1
 80036ca:	737b      	strb	r3, [r7, #13]
	GPIO_Init(GPIOC, &GPIO_InitStructureLED);
 80036cc:	f107 0308 	add.w	r3, r7, #8
 80036d0:	4619      	mov	r1, r3
 80036d2:	4819      	ldr	r0, [pc, #100]	; (8003738 <sys_GPIO_init+0x94>)
 80036d4:	f7ff fcac 	bl	8003030 <GPIO_Init>

	GPIO_InitStructureShift.GPIO_Pin 	= GPIO_SHIFT_DATA | GPIO_SHIFT_CLOCK | GPIO_SHIFT_RESET;
 80036d8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80036dc:	603b      	str	r3, [r7, #0]
	GPIO_InitStructureShift.GPIO_Mode 	= GPIO_Mode_OUT;
 80036de:	2301      	movs	r3, #1
 80036e0:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructureShift.GPIO_OType 	= GPIO_OType_PP;
 80036e2:	2300      	movs	r3, #0
 80036e4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructureShift.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructureShift);
 80036ea:	463b      	mov	r3, r7
 80036ec:	4619      	mov	r1, r3
 80036ee:	4812      	ldr	r0, [pc, #72]	; (8003738 <sys_GPIO_init+0x94>)
 80036f0:	f7ff fc9e 	bl	8003030 <GPIO_Init>

	// ==> Ensure Traffic LEDS are off
	GPIO_ResetBits(TRAFFIC_PORT, GPIO_LED_RED);
 80036f4:	2101      	movs	r1, #1
 80036f6:	4810      	ldr	r0, [pc, #64]	; (8003738 <sys_GPIO_init+0x94>)
 80036f8:	f7ff fd37 	bl	800316a <GPIO_ResetBits>
	GPIO_ResetBits(TRAFFIC_PORT, GPIO_LED_GREEN);
 80036fc:	2104      	movs	r1, #4
 80036fe:	480e      	ldr	r0, [pc, #56]	; (8003738 <sys_GPIO_init+0x94>)
 8003700:	f7ff fd33 	bl	800316a <GPIO_ResetBits>
	GPIO_ResetBits(TRAFFIC_PORT, GPIO_LED_YELLOW);
 8003704:	2102      	movs	r1, #2
 8003706:	480c      	ldr	r0, [pc, #48]	; (8003738 <sys_GPIO_init+0x94>)
 8003708:	f7ff fd2f 	bl	800316a <GPIO_ResetBits>


	// ==> Reset Shift registers
	GPIO_ResetBits(TRAFFIC_PORT, GPIO_SHIFT_RESET);
 800370c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003710:	4809      	ldr	r0, [pc, #36]	; (8003738 <sys_GPIO_init+0x94>)
 8003712:	f7ff fd2a 	bl	800316a <GPIO_ResetBits>
	GPIO_SetBits(TRAFFIC_PORT, GPIO_SHIFT_RESET);
 8003716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800371a:	4807      	ldr	r0, [pc, #28]	; (8003738 <sys_GPIO_init+0x94>)
 800371c:	f7ff fd16 	bl	800314c <GPIO_SetBits>

	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE);
 8003720:	2101      	movs	r1, #1
 8003722:	2040      	movs	r0, #64	; 0x40
 8003724:	f7ff fd50 	bl	80031c8 <RCC_AHB2PeriphClockCmd>
	RNG_Cmd(ENABLE);
 8003728:	2001      	movs	r0, #1
 800372a:	f7ff fd8d 	bl	8003248 <RNG_Cmd>
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40020800 	.word	0x40020800

0800373c <sys_ADC_init>:

void sys_ADC_init( void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
	// ==>  Enable the GPIO AHB clock for PORT C
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003742:	2101      	movs	r1, #1
 8003744:	2004      	movs	r0, #4
 8003746:	f7ff fd1f 	bl	8003188 <RCC_AHB1PeriphClockCmd>
	// ==>  Enable the ADC Interface Clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,  ENABLE);
 800374a:	2101      	movs	r1, #1
 800374c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003750:	f7ff fd5a 	bl	8003208 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructureADC;
	ADC_InitTypeDef  ADC_InitStructure;

	// ==> Initialize the ADC GPIO pins to alternate function
	GPIO_InitStructureADC.GPIO_Pin 		= GPIO_Pin_3;
 8003754:	2308      	movs	r3, #8
 8003756:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructureADC.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructureADC.GPIO_Mode 	= GPIO_Mode_AN;
 800375c:	2303      	movs	r3, #3
 800375e:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructureADC.GPIO_OType 	= GPIO_OType_PP;
 8003760:	2300      	movs	r3, #0
 8003762:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructureADC.GPIO_Speed 	= GPIO_Speed_25MHz;
 8003764:	2301      	movs	r3, #1
 8003766:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOC, &GPIO_InitStructureADC);
 8003768:	f107 0318 	add.w	r3, r7, #24
 800376c:	4619      	mov	r1, r3
 800376e:	4818      	ldr	r0, [pc, #96]	; (80037d0 <sys_ADC_init+0x94>)
 8003770:	f7ff fc5e 	bl	8003030 <GPIO_Init>

	ADC1->CR1 |= ADC_CR1_EOCIE;
 8003774:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <sys_ADC_init+0x98>)
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <sys_ADC_init+0x98>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f043 0320 	orr.w	r3, r3, #32
 800377e:	6053      	str	r3, [r2, #4]
	//==> Set ADC completion priority to 1
	NVIC_SetPriority(ADC_IRQn, 0);
 8003780:	2100      	movs	r1, #0
 8003782:	2012      	movs	r0, #18
 8003784:	f7ff ff64 	bl	8003650 <NVIC_SetPriority>
	// ==> Enable the ADC Completion ISR
	NVIC_EnableIRQ(ADC_IRQn);
 8003788:	2012      	movs	r0, #18
 800378a:	f7ff ff47 	bl	800361c <NVIC_EnableIRQ>

	// ==> Initialize the ADC system
	ADC_InitStructure.ADC_NbrOfConversion 		= 1;
 800378e:	2301      	movs	r3, #1
 8003790:	753b      	strb	r3, [r7, #20]
	ADC_InitStructure.ADC_ContinuousConvMode 	= DISABLE;
 8003792:	2300      	movs	r3, #0
 8003794:	717b      	strb	r3, [r7, #5]
	ADC_InitStructure.ADC_ScanConvMode 			= DISABLE;
 8003796:	2300      	movs	r3, #0
 8003798:	713b      	strb	r3, [r7, #4]
	ADC_InitStructure.ADC_ExternalTrigConv 		= DISABLE;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_ExternalTrigConvEdge 	= ADC_ExternalTrigConvEdge_None;
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_Resolution 			= ADC_Resolution_12b;
 80037a2:	2300      	movs	r3, #0
 80037a4:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_DataAlign 			= ADC_DataAlign_Right;
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
	ADC_Init(ADC1, &ADC_InitStructure);
 80037aa:	463b      	mov	r3, r7
 80037ac:	4619      	mov	r1, r3
 80037ae:	4809      	ldr	r0, [pc, #36]	; (80037d4 <sys_ADC_init+0x98>)
 80037b0:	f7ff f9b8 	bl	8002b24 <ADC_Init>

	ADC_Cmd(ADC1, ENABLE);
 80037b4:	2101      	movs	r1, #1
 80037b6:	4807      	ldr	r0, [pc, #28]	; (80037d4 <sys_ADC_init+0x98>)
 80037b8:	f7ff fa0a 	bl	8002bd0 <ADC_Cmd>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1, ADC_SampleTime_84Cycles);
 80037bc:	2304      	movs	r3, #4
 80037be:	2201      	movs	r2, #1
 80037c0:	210d      	movs	r1, #13
 80037c2:	4804      	ldr	r0, [pc, #16]	; (80037d4 <sys_ADC_init+0x98>)
 80037c4:	f7ff fa20 	bl	8002c08 <ADC_RegularChannelConfig>
}
 80037c8:	bf00      	nop
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40020800 	.word	0x40020800
 80037d4:	40012000 	.word	0x40012000

080037d8 <xTrafficSimulator>:

volatile uint8_t  g_CurrentLState;
EventGroupHandle_t xEVT_FSM_Transition;

void xTrafficSimulator(void *pvParameters)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	uint8_t addCar;
	uint16_t bitMask;
	uint32_t preLightTraffic;
	uint32_t postLightTraffic;
	uint32_t carTraffic = 0x00;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]


	printf("==> Starting TASK: FLOW SAMPLER\n");
 80037e4:	484a      	ldr	r0, [pc, #296]	; (8003910 <xTrafficSimulator+0x138>)
 80037e6:	f000 fdbd 	bl	8004364 <puts>

	while(1)
	{
		// ==> Wait for RNG to be ready
		while(!RNG_GetFlagStatus(RNG_FLAG_DRDY));
 80037ea:	bf00      	nop
 80037ec:	2001      	movs	r0, #1
 80037ee:	f7ff fd49 	bl	8003284 <RNG_GetFlagStatus>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f9      	beq.n	80037ec <xTrafficSimulator+0x14>

		// ==> Add a car based on a ratio
		addCar = (RNG->DR % MAX_ADC_VALUE)  > (MAX_ADC_VALUE - controlADC.flowRate);
 80037f8:	4b46      	ldr	r3, [pc, #280]	; (8003914 <xTrafficSimulator+0x13c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003800:	4a45      	ldr	r2, [pc, #276]	; (8003918 <xTrafficSimulator+0x140>)
 8003802:	8812      	ldrh	r2, [r2, #0]
 8003804:	f3c2 0206 	ubfx	r2, r2, #0, #7
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800380e:	4293      	cmp	r3, r2
 8003810:	bf8c      	ite	hi
 8003812:	2301      	movhi	r3, #1
 8003814:	2300      	movls	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	73fb      	strb	r3, [r7, #15]

		carTraffic |= addCar;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

		// ==> Reset SPC Output
		GPIO_ResetBits(TRAFFIC_PORT, GPIO_SHIFT_RESET);
 8003822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003826:	483d      	ldr	r0, [pc, #244]	; (800391c <xTrafficSimulator+0x144>)
 8003828:	f7ff fc9f 	bl	800316a <GPIO_ResetBits>
		GPIO_SetBits(TRAFFIC_PORT, GPIO_SHIFT_RESET);
 800382c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003830:	483a      	ldr	r0, [pc, #232]	; (800391c <xTrafficSimulator+0x144>)
 8003832:	f7ff fc8b 	bl	800314c <GPIO_SetBits>

		// ==> Loop to display the Cars on the LEDS.
		for(int16_t i = (SIMULATED_CARS - 1); i >= 0; i--)
 8003836:	2312      	movs	r3, #18
 8003838:	827b      	strh	r3, [r7, #18]
 800383a:	e01f      	b.n	800387c <xTrafficSimulator+0xa4>
		{
			if (1 & (carTraffic >> i))
 800383c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <xTrafficSimulator+0x80>
			{
				GPIO_SetBits(TRAFFIC_PORT, GPIO_SHIFT_DATA);
 800384e:	2140      	movs	r1, #64	; 0x40
 8003850:	4832      	ldr	r0, [pc, #200]	; (800391c <xTrafficSimulator+0x144>)
 8003852:	f7ff fc7b 	bl	800314c <GPIO_SetBits>
 8003856:	e003      	b.n	8003860 <xTrafficSimulator+0x88>

			}
			else
			{
				GPIO_ResetBits(TRAFFIC_PORT, GPIO_SHIFT_DATA);
 8003858:	2140      	movs	r1, #64	; 0x40
 800385a:	4830      	ldr	r0, [pc, #192]	; (800391c <xTrafficSimulator+0x144>)
 800385c:	f7ff fc85 	bl	800316a <GPIO_ResetBits>
			}

			GPIO_SetBits(TRAFFIC_PORT, GPIO_SHIFT_CLOCK );
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	482e      	ldr	r0, [pc, #184]	; (800391c <xTrafficSimulator+0x144>)
 8003864:	f7ff fc72 	bl	800314c <GPIO_SetBits>
			GPIO_ResetBits(TRAFFIC_PORT, GPIO_SHIFT_CLOCK);
 8003868:	2180      	movs	r1, #128	; 0x80
 800386a:	482c      	ldr	r0, [pc, #176]	; (800391c <xTrafficSimulator+0x144>)
 800386c:	f7ff fc7d 	bl	800316a <GPIO_ResetBits>
		for(int16_t i = (SIMULATED_CARS - 1); i >= 0; i--)
 8003870:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29b      	uxth	r3, r3
 800387a:	827b      	strh	r3, [r7, #18]
 800387c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003880:	2b00      	cmp	r3, #0
 8003882:	dadb      	bge.n	800383c <xTrafficSimulator+0x64>


		// ==> Post process to determine where the cars are depending:
		// 			GREEN || YELLOW: all cars move
		//			RED: Cars in-front of light bunch, cars after red light go.
		if(EVAL_STATE(g_CurrentLState, RED_STATE))
 8003884:	4b26      	ldr	r3, [pc, #152]	; (8003920 <xTrafficSimulator+0x148>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d032      	beq.n	80038f8 <xTrafficSimulator+0x120>
		{
			// can improve by reseting i in green light
			for (int16_t i = 7; i >= 0; i--)
 8003892:	2307      	movs	r3, #7
 8003894:	823b      	strh	r3, [r7, #16]
 8003896:	e019      	b.n	80038cc <xTrafficSimulator+0xf4>
			{
				if (1 & (carTraffic >> i))
 8003898:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d015      	beq.n	80038d6 <xTrafficSimulator+0xfe>
				{
					bitMask |= 1 << i;
 80038aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80038ae:	2201      	movs	r2, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	b21a      	sxth	r2, r3
 80038b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	b21b      	sxth	r3, r3
 80038be:	83fb      	strh	r3, [r7, #30]
			for (int16_t i = 7; i >= 0; i--)
 80038c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	823b      	strh	r3, [r7, #16]
 80038cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	dae1      	bge.n	8003898 <xTrafficSimulator+0xc0>
 80038d4:	e000      	b.n	80038d8 <xTrafficSimulator+0x100>
				}
				else
				{
					break;
 80038d6:	bf00      	nop
				}
			}

			preLightTraffic  = ((preLightTraffic << 1) | bitMask) & 0xFF;
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	005a      	lsls	r2, r3, #1
 80038dc:	8bfb      	ldrh	r3, [r7, #30]
 80038de:	4313      	orrs	r3, r2
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	61bb      	str	r3, [r7, #24]

			postLightTraffic = (carTraffic & 0x3FF00) << 1;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	005a      	lsls	r2, r3, #1
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <xTrafficSimulator+0x14c>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	60bb      	str	r3, [r7, #8]

			carTraffic = preLightTraffic | postLightTraffic;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e006      	b.n	8003906 <xTrafficSimulator+0x12e>
		}
		else
		{
			bitMask = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	83fb      	strh	r3, [r7, #30]
			carTraffic = (carTraffic << 1) & 0x0007FFFF;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003904:	617b      	str	r3, [r7, #20]
		}

		vTaskDelay(pdMS_TO_TICKS(500));
 8003906:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800390a:	f7fd ff27 	bl	800175c <vTaskDelay>
		while(!RNG_GetFlagStatus(RNG_FLAG_DRDY));
 800390e:	e76c      	b.n	80037ea <xTrafficSimulator+0x12>
 8003910:	08004bf0 	.word	0x08004bf0
 8003914:	50060800 	.word	0x50060800
 8003918:	20001eb0 	.word	0x20001eb0
 800391c:	40020800 	.word	0x40020800
 8003920:	20001eb4 	.word	0x20001eb4
 8003924:	0007fe00 	.word	0x0007fe00

08003928 <xTrafficLightFSM>:
	}
	printf("==> TASK ENDED: FLOW SAMPLER\n");
}

void xTrafficLightFSM(void *pvParameters)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b087      	sub	sp, #28
 800392c:	af02      	add	r7, sp, #8
 800392e:	6078      	str	r0, [r7, #4]
	EventBits_t evtBits;
	uint32_t lightTimerPeriod;

	printf("==> Starting TASK: Traffic Generator\n");
 8003930:	484a      	ldr	r0, [pc, #296]	; (8003a5c <xTrafficLightFSM+0x134>)
 8003932:	f000 fd17 	bl	8004364 <puts>

	// ==> Initialize to Green Light
	xEventGroupSetBits(xEVT_FSM_Transition,	GREEN_STATE);
 8003936:	4b4a      	ldr	r3, [pc, #296]	; (8003a60 <xTrafficLightFSM+0x138>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f7fc fd27 	bl	8000390 <xEventGroupSetBits>

	while(1)
	{
		evtBits = xEventGroupWaitBits(xEVT_FSM_Transition,
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <xTrafficLightFSM+0x138>)
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	f241 7370 	movw	r3, #6000	; 0x1770
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2300      	movs	r3, #0
 800394e:	2201      	movs	r2, #1
 8003950:	2107      	movs	r1, #7
 8003952:	f7fc fc55 	bl	8000200 <xEventGroupWaitBits>
 8003956:	60f8      	str	r0, [r7, #12]
					GREEN_STATE | RED_STATE | YELLOW_STATE,
					pdTRUE,
					pdFALSE,
					MAX_EVENT_WAIT);

		if (EVAL_STATE(evtBits, GREEN_STATE))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d025      	beq.n	80039ae <xTrafficLightFSM+0x86>
		{
			printf("Light State: GREEN\n");
 8003962:	4840      	ldr	r0, [pc, #256]	; (8003a64 <xTrafficLightFSM+0x13c>)
 8003964:	f000 fcfe 	bl	8004364 <puts>

			g_CurrentLState = GREEN_STATE;
 8003968:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <xTrafficLightFSM+0x140>)
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]

			// ==> Turn Off the RED LED and turn ON the GREEN
			GPIO_ResetBits(TRAFFIC_PORT, GPIO_LED_RED);
 800396e:	2101      	movs	r1, #1
 8003970:	483e      	ldr	r0, [pc, #248]	; (8003a6c <xTrafficLightFSM+0x144>)
 8003972:	f7ff fbfa 	bl	800316a <GPIO_ResetBits>
			GPIO_SetBits(TRAFFIC_PORT, 	 GPIO_LED_GREEN);
 8003976:	2104      	movs	r1, #4
 8003978:	483c      	ldr	r0, [pc, #240]	; (8003a6c <xTrafficLightFSM+0x144>)
 800397a:	f7ff fbe7 	bl	800314c <GPIO_SetBits>

			// ==> Set GREEN light period based on traffic flow
			lightTimerPeriod = GREEN_L_MS;
 800397e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003982:	60bb      	str	r3, [r7, #8]

			xTimerChangePeriod(xTIM_Light_Timer,
 8003984:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <xTrafficLightFSM+0x148>)
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	2300      	movs	r3, #0
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2300      	movs	r3, #0
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	2104      	movs	r1, #4
 8003992:	f7fe fe2d 	bl	80025f0 <xTimerGenericCommand>
					lightTimerPeriod,
					0);

			xTimerStart(xTIM_Light_Timer, 0);
 8003996:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <xTrafficLightFSM+0x148>)
 8003998:	681c      	ldr	r4, [r3, #0]
 800399a:	f7fe f809 	bl	80019b0 <xTaskGetTickCount>
 800399e:	4602      	mov	r2, r0
 80039a0:	2300      	movs	r3, #0
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	2101      	movs	r1, #1
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7fe fe21 	bl	80025f0 <xTimerGenericCommand>
		}
		if (EVAL_STATE(evtBits, YELLOW_STATE))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d025      	beq.n	8003a04 <xTrafficLightFSM+0xdc>
		{
			printf("Light State: YELLOW\n");
 80039b8:	482e      	ldr	r0, [pc, #184]	; (8003a74 <xTrafficLightFSM+0x14c>)
 80039ba:	f000 fcd3 	bl	8004364 <puts>

			g_CurrentLState = YELLOW_STATE;
 80039be:	4b2a      	ldr	r3, [pc, #168]	; (8003a68 <xTrafficLightFSM+0x140>)
 80039c0:	2202      	movs	r2, #2
 80039c2:	701a      	strb	r2, [r3, #0]

			// ==> Turn Off the RED LED and turn ON the GREEN
			GPIO_ResetBits(TRAFFIC_PORT, GPIO_LED_GREEN);
 80039c4:	2104      	movs	r1, #4
 80039c6:	4829      	ldr	r0, [pc, #164]	; (8003a6c <xTrafficLightFSM+0x144>)
 80039c8:	f7ff fbcf 	bl	800316a <GPIO_ResetBits>
			GPIO_SetBits(TRAFFIC_PORT, 	 GPIO_LED_YELLOW);
 80039cc:	2102      	movs	r1, #2
 80039ce:	4827      	ldr	r0, [pc, #156]	; (8003a6c <xTrafficLightFSM+0x144>)
 80039d0:	f7ff fbbc 	bl	800314c <GPIO_SetBits>

			lightTimerPeriod = YELLOW_L_MS;
 80039d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039d8:	60bb      	str	r3, [r7, #8]

			xTimerChangePeriod(xTIM_Light_Timer,
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <xTrafficLightFSM+0x148>)
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	2300      	movs	r3, #0
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	2104      	movs	r1, #4
 80039e8:	f7fe fe02 	bl	80025f0 <xTimerGenericCommand>
					lightTimerPeriod,
					0);

			xTimerStart(xTIM_Light_Timer, 0);
 80039ec:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <xTrafficLightFSM+0x148>)
 80039ee:	681c      	ldr	r4, [r3, #0]
 80039f0:	f7fd ffde 	bl	80019b0 <xTaskGetTickCount>
 80039f4:	4602      	mov	r2, r0
 80039f6:	2300      	movs	r3, #0
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	2300      	movs	r3, #0
 80039fc:	2101      	movs	r1, #1
 80039fe:	4620      	mov	r0, r4
 8003a00:	f7fe fdf6 	bl	80025f0 <xTimerGenericCommand>
		}
		if (EVAL_STATE(evtBits, RED_STATE))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d099      	beq.n	8003942 <xTrafficLightFSM+0x1a>
		{
			printf("Light State: RED\n");
 8003a0e:	481a      	ldr	r0, [pc, #104]	; (8003a78 <xTrafficLightFSM+0x150>)
 8003a10:	f000 fca8 	bl	8004364 <puts>

			g_CurrentLState = RED_STATE;
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <xTrafficLightFSM+0x140>)
 8003a16:	2204      	movs	r2, #4
 8003a18:	701a      	strb	r2, [r3, #0]

			// ==> Turn Off the RED LED and turn ON the GREEN
			GPIO_ResetBits(TRAFFIC_PORT, GPIO_LED_YELLOW);
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	4813      	ldr	r0, [pc, #76]	; (8003a6c <xTrafficLightFSM+0x144>)
 8003a1e:	f7ff fba4 	bl	800316a <GPIO_ResetBits>
			GPIO_SetBits(TRAFFIC_PORT, 	 GPIO_LED_RED);
 8003a22:	2101      	movs	r1, #1
 8003a24:	4811      	ldr	r0, [pc, #68]	; (8003a6c <xTrafficLightFSM+0x144>)
 8003a26:	f7ff fb91 	bl	800314c <GPIO_SetBits>

			// ==> Set RED light period based on traffic flow
			lightTimerPeriod = RED_L_MS;
 8003a2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a2e:	60bb      	str	r3, [r7, #8]

			xTimerChangePeriod(xTIM_Light_Timer,
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <xTrafficLightFSM+0x148>)
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	2300      	movs	r3, #0
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	f7fe fdd7 	bl	80025f0 <xTimerGenericCommand>
					lightTimerPeriod,
					0);

			xTimerStart(xTIM_Light_Timer, 0);
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <xTrafficLightFSM+0x148>)
 8003a44:	681c      	ldr	r4, [r3, #0]
 8003a46:	f7fd ffb3 	bl	80019b0 <xTaskGetTickCount>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	2101      	movs	r1, #1
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7fe fdcb 	bl	80025f0 <xTimerGenericCommand>
		evtBits = xEventGroupWaitBits(xEVT_FSM_Transition,
 8003a5a:	e772      	b.n	8003942 <xTrafficLightFSM+0x1a>
 8003a5c:	08004c10 	.word	0x08004c10
 8003a60:	20001eb8 	.word	0x20001eb8
 8003a64:	08004c38 	.word	0x08004c38
 8003a68:	20001eb4 	.word	0x20001eb4
 8003a6c:	40020800 	.word	0x40020800
 8003a70:	20001ec0 	.word	0x20001ec0
 8003a74:	08004c4c 	.word	0x08004c4c
 8003a78:	08004c60 	.word	0x08004c60

08003a7c <my_TASK_Init>:
	}
	printf("==> TASK ENDED: Traffic Generator\n");
}

void my_TASK_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af02      	add	r7, sp, #8
	xEVT_FSM_Transition = xEventGroupCreate();
 8003a82:	f7fc fba5 	bl	80001d0 <xEventGroupCreate>
 8003a86:	4602      	mov	r2, r0
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <my_TASK_Init+0x40>)
 8003a8a:	601a      	str	r2, [r3, #0]


	xTaskCreate(xTrafficSimulator, "tSimulator", 	configMINIMAL_STACK_SIZE, NULL, TASK_PR_1, NULL);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	2301      	movs	r3, #1
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	2282      	movs	r2, #130	; 0x82
 8003a98:	4909      	ldr	r1, [pc, #36]	; (8003ac0 <my_TASK_Init+0x44>)
 8003a9a:	480a      	ldr	r0, [pc, #40]	; (8003ac4 <my_TASK_Init+0x48>)
 8003a9c:	f7fd fd2c 	bl	80014f8 <xTaskCreate>
	xTaskCreate(xTrafficLightFSM,  "lightFSM", 	    configMINIMAL_STACK_SIZE, NULL, TASK_PR_2, NULL);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2282      	movs	r2, #130	; 0x82
 8003aac:	4906      	ldr	r1, [pc, #24]	; (8003ac8 <my_TASK_Init+0x4c>)
 8003aae:	4807      	ldr	r0, [pc, #28]	; (8003acc <my_TASK_Init+0x50>)
 8003ab0:	f7fd fd22 	bl	80014f8 <xTaskCreate>
	//xTaskCreate( TGenerator_Task, "Red_LED", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
	//xTaskCreate( Green_LED_Controller_Task, "Green_LED", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
	//xTaskCreate( Amber_LED_Controller_Task, "Amber_LED", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20001eb8 	.word	0x20001eb8
 8003ac0:	08004c74 	.word	0x08004c74
 8003ac4:	080037d9 	.word	0x080037d9
 8003ac8:	08004c80 	.word	0x08004c80
 8003acc:	08003929 	.word	0x08003929

08003ad0 <TIM_Traffic_Light_cb>:

xTimerHandle xTIM_ADC_Sampler;
xTimerHandle xTIM_Light_Timer;

void TIM_Traffic_Light_cb(xTimerHandle xTimer)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	uint8_t nextState = g_CurrentLState << 1;
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <TIM_Traffic_Light_cb+0x34>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]

	if (nextState == MAX_STATE)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d101      	bne.n	8003aec <TIM_Traffic_Light_cb+0x1c>
	{
		nextState = GREEN_STATE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
	}

	xEventGroupSetBits(xEVT_FSM_Transition,	nextState);
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <TIM_Traffic_Light_cb+0x38>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fc fc4b 	bl	8000390 <xEventGroupSetBits>
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20001eb4 	.word	0x20001eb4
 8003b08:	20001eb8 	.word	0x20001eb8

08003b0c <TIM_ADC_Sampler_cb>:


void TIM_ADC_Sampler_cb(xTimerHandle xTimer)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	printf("ADC Value: %d\n", controlADC.flowRate);
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <TIM_ADC_Sampler_cb+0x40>)
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	4619      	mov	r1, r3
 8003b20:	480b      	ldr	r0, [pc, #44]	; (8003b50 <TIM_ADC_Sampler_cb+0x44>)
 8003b22:	f000 fb41 	bl	80041a8 <printf>

	if(controlADC.adcStatus == ADC_CONVERSION_OFF )
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <TIM_ADC_Sampler_cb+0x40>)
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d107      	bne.n	8003b44 <TIM_ADC_Sampler_cb+0x38>
	{
		controlADC.adcStatus = ADC_CONVERSION_ON;
 8003b34:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <TIM_ADC_Sampler_cb+0x40>)
 8003b36:	8813      	ldrh	r3, [r2, #0]
 8003b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3c:	8013      	strh	r3, [r2, #0]
		ADC_SoftwareStartConv(ADC1);
 8003b3e:	4805      	ldr	r0, [pc, #20]	; (8003b54 <TIM_ADC_Sampler_cb+0x48>)
 8003b40:	f7ff f92c 	bl	8002d9c <ADC_SoftwareStartConv>
	}
}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20001eb0 	.word	0x20001eb0
 8003b50:	08004c8c 	.word	0x08004c8c
 8003b54:	40012000 	.word	0x40012000

08003b58 <my_SW_TIM_Init>:

void my_SW_TIM_Init()
{
 8003b58:	b590      	push	{r4, r7, lr}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af02      	add	r7, sp, #8
	xTIM_ADC_Sampler = xTimerCreate("ADCSampler", 1000 / portTICK_PERIOD_MS, pdTRUE,  (void *) 0, TIM_ADC_Sampler_cb);
 8003b5e:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <my_SW_TIM_Init+0x58>)
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2300      	movs	r3, #0
 8003b64:	2201      	movs	r2, #1
 8003b66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b6a:	4812      	ldr	r0, [pc, #72]	; (8003bb4 <my_SW_TIM_Init+0x5c>)
 8003b6c:	f7fe fcf2 	bl	8002554 <xTimerCreate>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <my_SW_TIM_Init+0x60>)
 8003b74:	601a      	str	r2, [r3, #0]
	xTIM_Light_Timer = xTimerCreate("ADCLightWD", 1000 / portTICK_PERIOD_MS, pdFALSE, (void *) 0, TIM_Traffic_Light_cb);
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <my_SW_TIM_Init+0x64>)
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b82:	480f      	ldr	r0, [pc, #60]	; (8003bc0 <my_SW_TIM_Init+0x68>)
 8003b84:	f7fe fce6 	bl	8002554 <xTimerCreate>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <my_SW_TIM_Init+0x6c>)
 8003b8c:	601a      	str	r2, [r3, #0]



	xTimerStart(xTIM_ADC_Sampler, 0);
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <my_SW_TIM_Init+0x60>)
 8003b90:	681c      	ldr	r4, [r3, #0]
 8003b92:	f7fd ff0d 	bl	80019b0 <xTaskGetTickCount>
 8003b96:	4602      	mov	r2, r0
 8003b98:	2300      	movs	r3, #0
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7fe fd25 	bl	80025f0 <xTimerGenericCommand>
}
 8003ba6:	bf00      	nop
 8003ba8:	3704      	adds	r7, #4
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd90      	pop	{r4, r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	08003b0d 	.word	0x08003b0d
 8003bb4:	08004c9c 	.word	0x08004c9c
 8003bb8:	20001ebc 	.word	0x20001ebc
 8003bbc:	08003ad1 	.word	0x08003ad1
 8003bc0:	08004ca8 	.word	0x08004ca8
 8003bc4:	20001ec0 	.word	0x20001ec0

08003bc8 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <ITM_SendChar+0x58>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01a      	beq.n	8003c12 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003bdc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003be0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003be4:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d012      	beq.n	8003c12 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8003bec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003bf0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003bf4:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8003bfc:	bf00      	nop
 8003bfe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0fa      	beq.n	8003bfe <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003c08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003c12:	687b      	ldr	r3, [r7, #4]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000edf0 	.word	0xe000edf0

08003c24 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e009      	b.n	8003c4e <_write+0x2a>
	 ITM_SendChar((*ptr++));
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	60ba      	str	r2, [r7, #8]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff ffc0 	bl	8003bc8 <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	dbf1      	blt.n	8003c3a <_write+0x16>
 return len;
 8003c56:	687b      	ldr	r3, [r7, #4]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_sbrk>:


void * _sbrk(int32_t incr)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <_sbrk+0x38>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <_sbrk+0x16>
		heap_end = & end;
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <_sbrk+0x38>)
 8003c72:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <_sbrk+0x3c>)
 8003c74:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <_sbrk+0x38>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <_sbrk+0x38>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <_sbrk+0x38>)
 8003c86:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003c88:	68fb      	ldr	r3, [r7, #12]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20001de8 	.word	0x20001de8
 8003c9c:	20001ec8 	.word	0x20001ec8

08003ca0 <_close>:

int _close(int32_t file)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <_close+0x20>)
 8003caa:	2258      	movs	r2, #88	; 0x58
 8003cac:	601a      	str	r2, [r3, #0]
	return -1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20001ec4 	.word	0x20001ec4

08003cc4 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <_fstat+0x20>)
 8003cd0:	2258      	movs	r2, #88	; 0x58
 8003cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	20001ec4 	.word	0x20001ec4

08003ce8 <_isatty>:

int _isatty(int32_t file)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <_isatty+0x1c>)
 8003cf2:	2258      	movs	r2, #88	; 0x58
 8003cf4:	601a      	str	r2, [r3, #0]
	return 0;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	20001ec4 	.word	0x20001ec4

08003d08 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <_lseek+0x24>)
 8003d16:	2258      	movs	r2, #88	; 0x58
 8003d18:	601a      	str	r2, [r3, #0]
	return -1;
 8003d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20001ec4 	.word	0x20001ec4

08003d30 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <_read+0x24>)
 8003d3e:	2258      	movs	r2, #88	; 0x58
 8003d40:	601a      	str	r2, [r3, #0]
	return -1;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20001ec4 	.word	0x20001ec4

08003d58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d5c:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <SystemInit+0x60>)
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <SystemInit+0x60>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <SystemInit+0x64>)
 8003d6e:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <SystemInit+0x64>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d78:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <SystemInit+0x64>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d7e:	4a0f      	ldr	r2, [pc, #60]	; (8003dbc <SystemInit+0x64>)
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <SystemInit+0x64>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <SystemInit+0x64>)
 8003d90:	4a0b      	ldr	r2, [pc, #44]	; (8003dc0 <SystemInit+0x68>)
 8003d92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d94:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <SystemInit+0x64>)
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <SystemInit+0x64>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <SystemInit+0x64>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003da6:	f000 f80d 	bl	8003dc4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003daa:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <SystemInit+0x60>)
 8003dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003db0:	609a      	str	r2, [r3, #8]
#endif
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	e000ed00 	.word	0xe000ed00
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	24003010 	.word	0x24003010

08003dc4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003dd2:	4a36      	ldr	r2, [pc, #216]	; (8003eac <SetSysClock+0xe8>)
 8003dd4:	4b35      	ldr	r3, [pc, #212]	; (8003eac <SetSysClock+0xe8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003dde:	4b33      	ldr	r3, [pc, #204]	; (8003eac <SetSysClock+0xe8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3301      	adds	r3, #1
 8003dec:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d103      	bne.n	8003dfc <SetSysClock+0x38>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003dfa:	d1f0      	bne.n	8003dde <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <SetSysClock+0xe8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	e001      	b.n	8003e12 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d142      	bne.n	8003e9e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003e18:	4a24      	ldr	r2, [pc, #144]	; (8003eac <SetSysClock+0xe8>)
 8003e1a:	4b24      	ldr	r3, [pc, #144]	; (8003eac <SetSysClock+0xe8>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003e24:	4a22      	ldr	r2, [pc, #136]	; (8003eb0 <SetSysClock+0xec>)
 8003e26:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <SetSysClock+0xec>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e2e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003e30:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <SetSysClock+0xe8>)
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <SetSysClock+0xe8>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003e38:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <SetSysClock+0xe8>)
 8003e3a:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <SetSysClock+0xe8>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e42:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <SetSysClock+0xe8>)
 8003e46:	4b19      	ldr	r3, [pc, #100]	; (8003eac <SetSysClock+0xe8>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003e4e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003e50:	4b16      	ldr	r3, [pc, #88]	; (8003eac <SetSysClock+0xe8>)
 8003e52:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <SetSysClock+0xf0>)
 8003e54:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003e56:	4a15      	ldr	r2, [pc, #84]	; (8003eac <SetSysClock+0xe8>)
 8003e58:	4b14      	ldr	r3, [pc, #80]	; (8003eac <SetSysClock+0xe8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e60:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003e62:	bf00      	nop
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <SetSysClock+0xe8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f9      	beq.n	8003e64 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <SetSysClock+0xf4>)
 8003e72:	f240 6205 	movw	r2, #1541	; 0x605
 8003e76:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003e78:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <SetSysClock+0xe8>)
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <SetSysClock+0xe8>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 0303 	bic.w	r3, r3, #3
 8003e82:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003e84:	4a09      	ldr	r2, [pc, #36]	; (8003eac <SetSysClock+0xe8>)
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <SetSysClock+0xe8>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f043 0302 	orr.w	r3, r3, #2
 8003e8e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003e90:	bf00      	nop
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <SetSysClock+0xe8>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d1f9      	bne.n	8003e92 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	07405408 	.word	0x07405408
 8003eb8:	40023c00 	.word	0x40023c00

08003ebc <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003ecc:	e004      	b.n	8003ed8 <ts_itoa+0x1c>
		div *= base;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d2f3      	bcs.n	8003ece <ts_itoa+0x12>

	while (div != 0)
 8003ee6:	e029      	b.n	8003f3c <ts_itoa+0x80>
	{
		int num = d/div;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003efa:	fb02 f201 	mul.w	r2, r2, r1
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f0a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b09      	cmp	r3, #9
 8003f10:	dd0a      	ble.n	8003f28 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	1c59      	adds	r1, r3, #1
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	6011      	str	r1, [r2, #0]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	3237      	adds	r2, #55	; 0x37
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e009      	b.n	8003f3c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	1c59      	adds	r1, r3, #1
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	6011      	str	r1, [r2, #0]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	3230      	adds	r2, #48	; 0x30
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1d2      	bne.n	8003ee8 <ts_itoa+0x2c>
	}
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b088      	sub	sp, #32
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003f5e:	e07d      	b.n	800405c <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b25      	cmp	r3, #37	; 0x25
 8003f66:	d171      	bne.n	800404c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b64      	cmp	r3, #100	; 0x64
 8003f74:	d01e      	beq.n	8003fb4 <ts_formatstring+0x66>
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	dc06      	bgt.n	8003f88 <ts_formatstring+0x3a>
 8003f7a:	2b58      	cmp	r3, #88	; 0x58
 8003f7c:	d050      	beq.n	8004020 <ts_formatstring+0xd2>
 8003f7e:	2b63      	cmp	r3, #99	; 0x63
 8003f80:	d00e      	beq.n	8003fa0 <ts_formatstring+0x52>
 8003f82:	2b25      	cmp	r3, #37	; 0x25
 8003f84:	d058      	beq.n	8004038 <ts_formatstring+0xea>
 8003f86:	e05d      	b.n	8004044 <ts_formatstring+0xf6>
 8003f88:	2b73      	cmp	r3, #115	; 0x73
 8003f8a:	d02b      	beq.n	8003fe4 <ts_formatstring+0x96>
 8003f8c:	2b73      	cmp	r3, #115	; 0x73
 8003f8e:	dc02      	bgt.n	8003f96 <ts_formatstring+0x48>
 8003f90:	2b69      	cmp	r3, #105	; 0x69
 8003f92:	d00f      	beq.n	8003fb4 <ts_formatstring+0x66>
 8003f94:	e056      	b.n	8004044 <ts_formatstring+0xf6>
 8003f96:	2b75      	cmp	r3, #117	; 0x75
 8003f98:	d037      	beq.n	800400a <ts_formatstring+0xbc>
 8003f9a:	2b78      	cmp	r3, #120	; 0x78
 8003f9c:	d040      	beq.n	8004020 <ts_formatstring+0xd2>
 8003f9e:	e051      	b.n	8004044 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	60fa      	str	r2, [r7, #12]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	1d11      	adds	r1, r2, #4
 8003faa:	6079      	str	r1, [r7, #4]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]
				break;
 8003fb2:	e047      	b.n	8004044 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	1d1a      	adds	r2, r3, #4
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	da07      	bge.n	8003fd4 <ts_formatstring+0x86>
					{
						val *= -1;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	425b      	negs	r3, r3
 8003fc8:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	60fa      	str	r2, [r7, #12]
 8003fd0:	222d      	movs	r2, #45	; 0x2d
 8003fd2:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003fd4:	69f9      	ldr	r1, [r7, #28]
 8003fd6:	f107 030c 	add.w	r3, r7, #12
 8003fda:	220a      	movs	r2, #10
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff6d 	bl	8003ebc <ts_itoa>
				}
				break;
 8003fe2:	e02f      	b.n	8004044 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	1d1a      	adds	r2, r3, #4
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003fee:	e007      	b.n	8004000 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	60fa      	str	r2, [r7, #12]
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	1c51      	adds	r1, r2, #1
 8003ffa:	61b9      	str	r1, [r7, #24]
 8003ffc:	7812      	ldrb	r2, [r2, #0]
 8003ffe:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f3      	bne.n	8003ff0 <ts_formatstring+0xa2>
					}
				}
				break;
 8004008:	e01c      	b.n	8004044 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	1d1a      	adds	r2, r3, #4
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	6819      	ldr	r1, [r3, #0]
 8004012:	f107 030c 	add.w	r3, r7, #12
 8004016:	220a      	movs	r2, #10
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff4f 	bl	8003ebc <ts_itoa>
				break;
 800401e:	e011      	b.n	8004044 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4619      	mov	r1, r3
 800402a:	f107 030c 	add.w	r3, r7, #12
 800402e:	2210      	movs	r2, #16
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff ff43 	bl	8003ebc <ts_itoa>
				break;
 8004036:	e005      	b.n	8004044 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	60fa      	str	r2, [r7, #12]
 800403e:	2225      	movs	r2, #37	; 0x25
 8004040:	701a      	strb	r2, [r3, #0]
				  break;
 8004042:	bf00      	nop
			}
			fmt++;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	3301      	adds	r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	e007      	b.n	800405c <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	60fa      	str	r2, [r7, #12]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	1c51      	adds	r1, r2, #1
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	7812      	ldrb	r2, [r2, #0]
 800405a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f47f af7d 	bne.w	8003f60 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	1ad3      	subs	r3, r2, r3
}
 8004074:	4618      	mov	r0, r3
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
	int length = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800408a:	e081      	b.n	8004190 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b25      	cmp	r3, #37	; 0x25
 8004092:	d177      	bne.n	8004184 <ts_formatlength+0x108>
		{
			++fmt;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3301      	adds	r3, #1
 8004098:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	3b58      	subs	r3, #88	; 0x58
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d86a      	bhi.n	800417a <ts_formatlength+0xfe>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <ts_formatlength+0x30>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	0800416d 	.word	0x0800416d
 80040b0:	0800417b 	.word	0x0800417b
 80040b4:	0800417b 	.word	0x0800417b
 80040b8:	0800417b 	.word	0x0800417b
 80040bc:	0800417b 	.word	0x0800417b
 80040c0:	0800417b 	.word	0x0800417b
 80040c4:	0800417b 	.word	0x0800417b
 80040c8:	0800417b 	.word	0x0800417b
 80040cc:	0800417b 	.word	0x0800417b
 80040d0:	0800417b 	.word	0x0800417b
 80040d4:	0800417b 	.word	0x0800417b
 80040d8:	08004131 	.word	0x08004131
 80040dc:	0800413f 	.word	0x0800413f
 80040e0:	0800417b 	.word	0x0800417b
 80040e4:	0800417b 	.word	0x0800417b
 80040e8:	0800417b 	.word	0x0800417b
 80040ec:	0800417b 	.word	0x0800417b
 80040f0:	0800413f 	.word	0x0800413f
 80040f4:	0800417b 	.word	0x0800417b
 80040f8:	0800417b 	.word	0x0800417b
 80040fc:	0800417b 	.word	0x0800417b
 8004100:	0800417b 	.word	0x0800417b
 8004104:	0800417b 	.word	0x0800417b
 8004108:	0800417b 	.word	0x0800417b
 800410c:	0800417b 	.word	0x0800417b
 8004110:	0800417b 	.word	0x0800417b
 8004114:	0800417b 	.word	0x0800417b
 8004118:	0800414d 	.word	0x0800414d
 800411c:	0800417b 	.word	0x0800417b
 8004120:	0800413f 	.word	0x0800413f
 8004124:	0800417b 	.word	0x0800417b
 8004128:	0800417b 	.word	0x0800417b
 800412c:	0800416d 	.word	0x0800416d
			{
			  case 'c':
		  		  va_arg(va, int);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	3304      	adds	r3, #4
 8004134:	603b      	str	r3, [r7, #0]
				  ++length;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3301      	adds	r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
				  break;
 800413c:	e025      	b.n	800418a <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	330b      	adds	r3, #11
 8004142:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	3304      	adds	r3, #4
 8004148:	603b      	str	r3, [r7, #0]
				  break;
 800414a:	e01e      	b.n	800418a <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	1d1a      	adds	r2, r3, #4
 8004150:	603a      	str	r2, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8004156:	e002      	b.n	800415e <ts_formatlength+0xe2>
			  			  ++length;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3301      	adds	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	60ba      	str	r2, [r7, #8]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f6      	bne.n	8004158 <ts_formatlength+0xdc>
			  	  }
				  break;
 800416a:	e00e      	b.n	800418a <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3308      	adds	r3, #8
 8004170:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	3304      	adds	r3, #4
 8004176:	603b      	str	r3, [r7, #0]
				  break;
 8004178:	e007      	b.n	800418a <ts_formatlength+0x10e>
			  default:
				  ++length;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3301      	adds	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
				  break;
 8004180:	bf00      	nop
 8004182:	e002      	b.n	800418a <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3301      	adds	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3301      	adds	r3, #1
 800418e:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f47f af79 	bne.w	800408c <ts_formatlength+0x10>
	}
	return length;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 80041a8:	b40f      	push	{r0, r1, r2, r3}
 80041aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
	int length = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 80041b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041ba:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 80041bc:	6839      	ldr	r1, [r7, #0]
 80041be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c0:	f7ff ff5c 	bl	800407c <ts_formatlength>
 80041c4:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 80041c6:	466b      	mov	r3, sp
 80041c8:	461e      	mov	r6, r3
		char buf[length];
 80041ca:	68f9      	ldr	r1, [r7, #12]
 80041cc:	1e4b      	subs	r3, r1, #1
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	460b      	mov	r3, r1
 80041d2:	461a      	mov	r2, r3
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80041dc:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80041e0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80041e4:	460b      	mov	r3, r1
 80041e6:	461a      	mov	r2, r3
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	00dd      	lsls	r5, r3, #3
 80041ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041f2:	00d4      	lsls	r4, r2, #3
 80041f4:	460b      	mov	r3, r1
 80041f6:	3307      	adds	r3, #7
 80041f8:	08db      	lsrs	r3, r3, #3
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	ebad 0d03 	sub.w	sp, sp, r3
 8004200:	466b      	mov	r3, sp
 8004202:	3300      	adds	r3, #0
 8004204:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8004206:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800420a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff fe9b 	bl	8003f4e <ts_formatstring>
 8004218:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4619      	mov	r1, r3
 8004220:	2001      	movs	r0, #1
 8004222:	f7ff fcff 	bl	8003c24 <_write>
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800422a:	68fb      	ldr	r3, [r7, #12]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004236:	b004      	add	sp, #16
 8004238:	4770      	bx	lr
	...

0800423c <__libc_init_array>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	4e0d      	ldr	r6, [pc, #52]	; (8004274 <__libc_init_array+0x38>)
 8004240:	4c0d      	ldr	r4, [pc, #52]	; (8004278 <__libc_init_array+0x3c>)
 8004242:	1ba4      	subs	r4, r4, r6
 8004244:	10a4      	asrs	r4, r4, #2
 8004246:	2500      	movs	r5, #0
 8004248:	42a5      	cmp	r5, r4
 800424a:	d109      	bne.n	8004260 <__libc_init_array+0x24>
 800424c:	4e0b      	ldr	r6, [pc, #44]	; (800427c <__libc_init_array+0x40>)
 800424e:	4c0c      	ldr	r4, [pc, #48]	; (8004280 <__libc_init_array+0x44>)
 8004250:	f000 fd62 	bl	8004d18 <_init>
 8004254:	1ba4      	subs	r4, r4, r6
 8004256:	10a4      	asrs	r4, r4, #2
 8004258:	2500      	movs	r5, #0
 800425a:	42a5      	cmp	r5, r4
 800425c:	d105      	bne.n	800426a <__libc_init_array+0x2e>
 800425e:	bd70      	pop	{r4, r5, r6, pc}
 8004260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004264:	4798      	blx	r3
 8004266:	3501      	adds	r5, #1
 8004268:	e7ee      	b.n	8004248 <__libc_init_array+0xc>
 800426a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800426e:	4798      	blx	r3
 8004270:	3501      	adds	r5, #1
 8004272:	e7f2      	b.n	800425a <__libc_init_array+0x1e>
 8004274:	08004d30 	.word	0x08004d30
 8004278:	08004d30 	.word	0x08004d30
 800427c:	08004d30 	.word	0x08004d30
 8004280:	08004d34 	.word	0x08004d34

08004284 <memcpy>:
 8004284:	b510      	push	{r4, lr}
 8004286:	1e43      	subs	r3, r0, #1
 8004288:	440a      	add	r2, r1
 800428a:	4291      	cmp	r1, r2
 800428c:	d100      	bne.n	8004290 <memcpy+0xc>
 800428e:	bd10      	pop	{r4, pc}
 8004290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004298:	e7f7      	b.n	800428a <memcpy+0x6>

0800429a <memset>:
 800429a:	4402      	add	r2, r0
 800429c:	4603      	mov	r3, r0
 800429e:	4293      	cmp	r3, r2
 80042a0:	d100      	bne.n	80042a4 <memset+0xa>
 80042a2:	4770      	bx	lr
 80042a4:	f803 1b01 	strb.w	r1, [r3], #1
 80042a8:	e7f9      	b.n	800429e <memset+0x4>
	...

080042ac <_puts_r>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	460e      	mov	r6, r1
 80042b0:	4605      	mov	r5, r0
 80042b2:	b118      	cbz	r0, 80042bc <_puts_r+0x10>
 80042b4:	6983      	ldr	r3, [r0, #24]
 80042b6:	b90b      	cbnz	r3, 80042bc <_puts_r+0x10>
 80042b8:	f000 fa0e 	bl	80046d8 <__sinit>
 80042bc:	69ab      	ldr	r3, [r5, #24]
 80042be:	68ac      	ldr	r4, [r5, #8]
 80042c0:	b913      	cbnz	r3, 80042c8 <_puts_r+0x1c>
 80042c2:	4628      	mov	r0, r5
 80042c4:	f000 fa08 	bl	80046d8 <__sinit>
 80042c8:	4b23      	ldr	r3, [pc, #140]	; (8004358 <_puts_r+0xac>)
 80042ca:	429c      	cmp	r4, r3
 80042cc:	d117      	bne.n	80042fe <_puts_r+0x52>
 80042ce:	686c      	ldr	r4, [r5, #4]
 80042d0:	89a3      	ldrh	r3, [r4, #12]
 80042d2:	071b      	lsls	r3, r3, #28
 80042d4:	d51d      	bpl.n	8004312 <_puts_r+0x66>
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	b1db      	cbz	r3, 8004312 <_puts_r+0x66>
 80042da:	3e01      	subs	r6, #1
 80042dc:	68a3      	ldr	r3, [r4, #8]
 80042de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042e2:	3b01      	subs	r3, #1
 80042e4:	60a3      	str	r3, [r4, #8]
 80042e6:	b9e9      	cbnz	r1, 8004324 <_puts_r+0x78>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	da2e      	bge.n	800434a <_puts_r+0x9e>
 80042ec:	4622      	mov	r2, r4
 80042ee:	210a      	movs	r1, #10
 80042f0:	4628      	mov	r0, r5
 80042f2:	f000 f83f 	bl	8004374 <__swbuf_r>
 80042f6:	3001      	adds	r0, #1
 80042f8:	d011      	beq.n	800431e <_puts_r+0x72>
 80042fa:	200a      	movs	r0, #10
 80042fc:	bd70      	pop	{r4, r5, r6, pc}
 80042fe:	4b17      	ldr	r3, [pc, #92]	; (800435c <_puts_r+0xb0>)
 8004300:	429c      	cmp	r4, r3
 8004302:	d101      	bne.n	8004308 <_puts_r+0x5c>
 8004304:	68ac      	ldr	r4, [r5, #8]
 8004306:	e7e3      	b.n	80042d0 <_puts_r+0x24>
 8004308:	4b15      	ldr	r3, [pc, #84]	; (8004360 <_puts_r+0xb4>)
 800430a:	429c      	cmp	r4, r3
 800430c:	bf08      	it	eq
 800430e:	68ec      	ldreq	r4, [r5, #12]
 8004310:	e7de      	b.n	80042d0 <_puts_r+0x24>
 8004312:	4621      	mov	r1, r4
 8004314:	4628      	mov	r0, r5
 8004316:	f000 f87f 	bl	8004418 <__swsetup_r>
 800431a:	2800      	cmp	r0, #0
 800431c:	d0dd      	beq.n	80042da <_puts_r+0x2e>
 800431e:	f04f 30ff 	mov.w	r0, #4294967295
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	2b00      	cmp	r3, #0
 8004326:	da04      	bge.n	8004332 <_puts_r+0x86>
 8004328:	69a2      	ldr	r2, [r4, #24]
 800432a:	4293      	cmp	r3, r2
 800432c:	db06      	blt.n	800433c <_puts_r+0x90>
 800432e:	290a      	cmp	r1, #10
 8004330:	d004      	beq.n	800433c <_puts_r+0x90>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	6022      	str	r2, [r4, #0]
 8004338:	7019      	strb	r1, [r3, #0]
 800433a:	e7cf      	b.n	80042dc <_puts_r+0x30>
 800433c:	4622      	mov	r2, r4
 800433e:	4628      	mov	r0, r5
 8004340:	f000 f818 	bl	8004374 <__swbuf_r>
 8004344:	3001      	adds	r0, #1
 8004346:	d1c9      	bne.n	80042dc <_puts_r+0x30>
 8004348:	e7e9      	b.n	800431e <_puts_r+0x72>
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	200a      	movs	r0, #10
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	6022      	str	r2, [r4, #0]
 8004352:	7018      	strb	r0, [r3, #0]
 8004354:	bd70      	pop	{r4, r5, r6, pc}
 8004356:	bf00      	nop
 8004358:	08004cd4 	.word	0x08004cd4
 800435c:	08004cf4 	.word	0x08004cf4
 8004360:	08004cb4 	.word	0x08004cb4

08004364 <puts>:
 8004364:	4b02      	ldr	r3, [pc, #8]	; (8004370 <puts+0xc>)
 8004366:	4601      	mov	r1, r0
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f7ff bf9f 	b.w	80042ac <_puts_r>
 800436e:	bf00      	nop
 8004370:	20000018 	.word	0x20000018

08004374 <__swbuf_r>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	460e      	mov	r6, r1
 8004378:	4614      	mov	r4, r2
 800437a:	4605      	mov	r5, r0
 800437c:	b118      	cbz	r0, 8004386 <__swbuf_r+0x12>
 800437e:	6983      	ldr	r3, [r0, #24]
 8004380:	b90b      	cbnz	r3, 8004386 <__swbuf_r+0x12>
 8004382:	f000 f9a9 	bl	80046d8 <__sinit>
 8004386:	4b21      	ldr	r3, [pc, #132]	; (800440c <__swbuf_r+0x98>)
 8004388:	429c      	cmp	r4, r3
 800438a:	d12a      	bne.n	80043e2 <__swbuf_r+0x6e>
 800438c:	686c      	ldr	r4, [r5, #4]
 800438e:	69a3      	ldr	r3, [r4, #24]
 8004390:	60a3      	str	r3, [r4, #8]
 8004392:	89a3      	ldrh	r3, [r4, #12]
 8004394:	071a      	lsls	r2, r3, #28
 8004396:	d52e      	bpl.n	80043f6 <__swbuf_r+0x82>
 8004398:	6923      	ldr	r3, [r4, #16]
 800439a:	b363      	cbz	r3, 80043f6 <__swbuf_r+0x82>
 800439c:	6923      	ldr	r3, [r4, #16]
 800439e:	6820      	ldr	r0, [r4, #0]
 80043a0:	1ac0      	subs	r0, r0, r3
 80043a2:	6963      	ldr	r3, [r4, #20]
 80043a4:	b2f6      	uxtb	r6, r6
 80043a6:	4298      	cmp	r0, r3
 80043a8:	4637      	mov	r7, r6
 80043aa:	db04      	blt.n	80043b6 <__swbuf_r+0x42>
 80043ac:	4621      	mov	r1, r4
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 f928 	bl	8004604 <_fflush_r>
 80043b4:	bb28      	cbnz	r0, 8004402 <__swbuf_r+0x8e>
 80043b6:	68a3      	ldr	r3, [r4, #8]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	60a3      	str	r3, [r4, #8]
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	6022      	str	r2, [r4, #0]
 80043c2:	701e      	strb	r6, [r3, #0]
 80043c4:	6963      	ldr	r3, [r4, #20]
 80043c6:	3001      	adds	r0, #1
 80043c8:	4298      	cmp	r0, r3
 80043ca:	d004      	beq.n	80043d6 <__swbuf_r+0x62>
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	07db      	lsls	r3, r3, #31
 80043d0:	d519      	bpl.n	8004406 <__swbuf_r+0x92>
 80043d2:	2e0a      	cmp	r6, #10
 80043d4:	d117      	bne.n	8004406 <__swbuf_r+0x92>
 80043d6:	4621      	mov	r1, r4
 80043d8:	4628      	mov	r0, r5
 80043da:	f000 f913 	bl	8004604 <_fflush_r>
 80043de:	b190      	cbz	r0, 8004406 <__swbuf_r+0x92>
 80043e0:	e00f      	b.n	8004402 <__swbuf_r+0x8e>
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <__swbuf_r+0x9c>)
 80043e4:	429c      	cmp	r4, r3
 80043e6:	d101      	bne.n	80043ec <__swbuf_r+0x78>
 80043e8:	68ac      	ldr	r4, [r5, #8]
 80043ea:	e7d0      	b.n	800438e <__swbuf_r+0x1a>
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <__swbuf_r+0xa0>)
 80043ee:	429c      	cmp	r4, r3
 80043f0:	bf08      	it	eq
 80043f2:	68ec      	ldreq	r4, [r5, #12]
 80043f4:	e7cb      	b.n	800438e <__swbuf_r+0x1a>
 80043f6:	4621      	mov	r1, r4
 80043f8:	4628      	mov	r0, r5
 80043fa:	f000 f80d 	bl	8004418 <__swsetup_r>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d0cc      	beq.n	800439c <__swbuf_r+0x28>
 8004402:	f04f 37ff 	mov.w	r7, #4294967295
 8004406:	4638      	mov	r0, r7
 8004408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800440a:	bf00      	nop
 800440c:	08004cd4 	.word	0x08004cd4
 8004410:	08004cf4 	.word	0x08004cf4
 8004414:	08004cb4 	.word	0x08004cb4

08004418 <__swsetup_r>:
 8004418:	4b32      	ldr	r3, [pc, #200]	; (80044e4 <__swsetup_r+0xcc>)
 800441a:	b570      	push	{r4, r5, r6, lr}
 800441c:	681d      	ldr	r5, [r3, #0]
 800441e:	4606      	mov	r6, r0
 8004420:	460c      	mov	r4, r1
 8004422:	b125      	cbz	r5, 800442e <__swsetup_r+0x16>
 8004424:	69ab      	ldr	r3, [r5, #24]
 8004426:	b913      	cbnz	r3, 800442e <__swsetup_r+0x16>
 8004428:	4628      	mov	r0, r5
 800442a:	f000 f955 	bl	80046d8 <__sinit>
 800442e:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <__swsetup_r+0xd0>)
 8004430:	429c      	cmp	r4, r3
 8004432:	d10f      	bne.n	8004454 <__swsetup_r+0x3c>
 8004434:	686c      	ldr	r4, [r5, #4]
 8004436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800443a:	b29a      	uxth	r2, r3
 800443c:	0715      	lsls	r5, r2, #28
 800443e:	d42c      	bmi.n	800449a <__swsetup_r+0x82>
 8004440:	06d0      	lsls	r0, r2, #27
 8004442:	d411      	bmi.n	8004468 <__swsetup_r+0x50>
 8004444:	2209      	movs	r2, #9
 8004446:	6032      	str	r2, [r6, #0]
 8004448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800444c:	81a3      	strh	r3, [r4, #12]
 800444e:	f04f 30ff 	mov.w	r0, #4294967295
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <__swsetup_r+0xd4>)
 8004456:	429c      	cmp	r4, r3
 8004458:	d101      	bne.n	800445e <__swsetup_r+0x46>
 800445a:	68ac      	ldr	r4, [r5, #8]
 800445c:	e7eb      	b.n	8004436 <__swsetup_r+0x1e>
 800445e:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <__swsetup_r+0xd8>)
 8004460:	429c      	cmp	r4, r3
 8004462:	bf08      	it	eq
 8004464:	68ec      	ldreq	r4, [r5, #12]
 8004466:	e7e6      	b.n	8004436 <__swsetup_r+0x1e>
 8004468:	0751      	lsls	r1, r2, #29
 800446a:	d512      	bpl.n	8004492 <__swsetup_r+0x7a>
 800446c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800446e:	b141      	cbz	r1, 8004482 <__swsetup_r+0x6a>
 8004470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004474:	4299      	cmp	r1, r3
 8004476:	d002      	beq.n	800447e <__swsetup_r+0x66>
 8004478:	4630      	mov	r0, r6
 800447a:	f000 fa1b 	bl	80048b4 <_free_r>
 800447e:	2300      	movs	r3, #0
 8004480:	6363      	str	r3, [r4, #52]	; 0x34
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	2300      	movs	r3, #0
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	f043 0308 	orr.w	r3, r3, #8
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	6923      	ldr	r3, [r4, #16]
 800449c:	b94b      	cbnz	r3, 80044b2 <__swsetup_r+0x9a>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a8:	d003      	beq.n	80044b2 <__swsetup_r+0x9a>
 80044aa:	4621      	mov	r1, r4
 80044ac:	4630      	mov	r0, r6
 80044ae:	f000 f9c1 	bl	8004834 <__smakebuf_r>
 80044b2:	89a2      	ldrh	r2, [r4, #12]
 80044b4:	f012 0301 	ands.w	r3, r2, #1
 80044b8:	d00c      	beq.n	80044d4 <__swsetup_r+0xbc>
 80044ba:	2300      	movs	r3, #0
 80044bc:	60a3      	str	r3, [r4, #8]
 80044be:	6963      	ldr	r3, [r4, #20]
 80044c0:	425b      	negs	r3, r3
 80044c2:	61a3      	str	r3, [r4, #24]
 80044c4:	6923      	ldr	r3, [r4, #16]
 80044c6:	b953      	cbnz	r3, 80044de <__swsetup_r+0xc6>
 80044c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80044d0:	d1ba      	bne.n	8004448 <__swsetup_r+0x30>
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	0792      	lsls	r2, r2, #30
 80044d6:	bf58      	it	pl
 80044d8:	6963      	ldrpl	r3, [r4, #20]
 80044da:	60a3      	str	r3, [r4, #8]
 80044dc:	e7f2      	b.n	80044c4 <__swsetup_r+0xac>
 80044de:	2000      	movs	r0, #0
 80044e0:	e7f7      	b.n	80044d2 <__swsetup_r+0xba>
 80044e2:	bf00      	nop
 80044e4:	20000018 	.word	0x20000018
 80044e8:	08004cd4 	.word	0x08004cd4
 80044ec:	08004cf4 	.word	0x08004cf4
 80044f0:	08004cb4 	.word	0x08004cb4

080044f4 <__sflush_r>:
 80044f4:	898a      	ldrh	r2, [r1, #12]
 80044f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044fa:	4605      	mov	r5, r0
 80044fc:	0710      	lsls	r0, r2, #28
 80044fe:	460c      	mov	r4, r1
 8004500:	d45a      	bmi.n	80045b8 <__sflush_r+0xc4>
 8004502:	684b      	ldr	r3, [r1, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	dc05      	bgt.n	8004514 <__sflush_r+0x20>
 8004508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	dc02      	bgt.n	8004514 <__sflush_r+0x20>
 800450e:	2000      	movs	r0, #0
 8004510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004516:	2e00      	cmp	r6, #0
 8004518:	d0f9      	beq.n	800450e <__sflush_r+0x1a>
 800451a:	2300      	movs	r3, #0
 800451c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004520:	682f      	ldr	r7, [r5, #0]
 8004522:	602b      	str	r3, [r5, #0]
 8004524:	d033      	beq.n	800458e <__sflush_r+0x9a>
 8004526:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	075a      	lsls	r2, r3, #29
 800452c:	d505      	bpl.n	800453a <__sflush_r+0x46>
 800452e:	6863      	ldr	r3, [r4, #4]
 8004530:	1ac0      	subs	r0, r0, r3
 8004532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004534:	b10b      	cbz	r3, 800453a <__sflush_r+0x46>
 8004536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004538:	1ac0      	subs	r0, r0, r3
 800453a:	2300      	movs	r3, #0
 800453c:	4602      	mov	r2, r0
 800453e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004540:	6a21      	ldr	r1, [r4, #32]
 8004542:	4628      	mov	r0, r5
 8004544:	47b0      	blx	r6
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	d106      	bne.n	800455a <__sflush_r+0x66>
 800454c:	6829      	ldr	r1, [r5, #0]
 800454e:	291d      	cmp	r1, #29
 8004550:	d84b      	bhi.n	80045ea <__sflush_r+0xf6>
 8004552:	4a2b      	ldr	r2, [pc, #172]	; (8004600 <__sflush_r+0x10c>)
 8004554:	40ca      	lsrs	r2, r1
 8004556:	07d6      	lsls	r6, r2, #31
 8004558:	d547      	bpl.n	80045ea <__sflush_r+0xf6>
 800455a:	2200      	movs	r2, #0
 800455c:	6062      	str	r2, [r4, #4]
 800455e:	04d9      	lsls	r1, r3, #19
 8004560:	6922      	ldr	r2, [r4, #16]
 8004562:	6022      	str	r2, [r4, #0]
 8004564:	d504      	bpl.n	8004570 <__sflush_r+0x7c>
 8004566:	1c42      	adds	r2, r0, #1
 8004568:	d101      	bne.n	800456e <__sflush_r+0x7a>
 800456a:	682b      	ldr	r3, [r5, #0]
 800456c:	b903      	cbnz	r3, 8004570 <__sflush_r+0x7c>
 800456e:	6560      	str	r0, [r4, #84]	; 0x54
 8004570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004572:	602f      	str	r7, [r5, #0]
 8004574:	2900      	cmp	r1, #0
 8004576:	d0ca      	beq.n	800450e <__sflush_r+0x1a>
 8004578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800457c:	4299      	cmp	r1, r3
 800457e:	d002      	beq.n	8004586 <__sflush_r+0x92>
 8004580:	4628      	mov	r0, r5
 8004582:	f000 f997 	bl	80048b4 <_free_r>
 8004586:	2000      	movs	r0, #0
 8004588:	6360      	str	r0, [r4, #52]	; 0x34
 800458a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800458e:	6a21      	ldr	r1, [r4, #32]
 8004590:	2301      	movs	r3, #1
 8004592:	4628      	mov	r0, r5
 8004594:	47b0      	blx	r6
 8004596:	1c41      	adds	r1, r0, #1
 8004598:	d1c6      	bne.n	8004528 <__sflush_r+0x34>
 800459a:	682b      	ldr	r3, [r5, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0c3      	beq.n	8004528 <__sflush_r+0x34>
 80045a0:	2b1d      	cmp	r3, #29
 80045a2:	d001      	beq.n	80045a8 <__sflush_r+0xb4>
 80045a4:	2b16      	cmp	r3, #22
 80045a6:	d101      	bne.n	80045ac <__sflush_r+0xb8>
 80045a8:	602f      	str	r7, [r5, #0]
 80045aa:	e7b0      	b.n	800450e <__sflush_r+0x1a>
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045b2:	81a3      	strh	r3, [r4, #12]
 80045b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045b8:	690f      	ldr	r7, [r1, #16]
 80045ba:	2f00      	cmp	r7, #0
 80045bc:	d0a7      	beq.n	800450e <__sflush_r+0x1a>
 80045be:	0793      	lsls	r3, r2, #30
 80045c0:	680e      	ldr	r6, [r1, #0]
 80045c2:	bf08      	it	eq
 80045c4:	694b      	ldreq	r3, [r1, #20]
 80045c6:	600f      	str	r7, [r1, #0]
 80045c8:	bf18      	it	ne
 80045ca:	2300      	movne	r3, #0
 80045cc:	eba6 0807 	sub.w	r8, r6, r7
 80045d0:	608b      	str	r3, [r1, #8]
 80045d2:	f1b8 0f00 	cmp.w	r8, #0
 80045d6:	dd9a      	ble.n	800450e <__sflush_r+0x1a>
 80045d8:	4643      	mov	r3, r8
 80045da:	463a      	mov	r2, r7
 80045dc:	6a21      	ldr	r1, [r4, #32]
 80045de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045e0:	4628      	mov	r0, r5
 80045e2:	47b0      	blx	r6
 80045e4:	2800      	cmp	r0, #0
 80045e6:	dc07      	bgt.n	80045f8 <__sflush_r+0x104>
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ee:	81a3      	strh	r3, [r4, #12]
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f8:	4407      	add	r7, r0
 80045fa:	eba8 0800 	sub.w	r8, r8, r0
 80045fe:	e7e8      	b.n	80045d2 <__sflush_r+0xde>
 8004600:	20400001 	.word	0x20400001

08004604 <_fflush_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	690b      	ldr	r3, [r1, #16]
 8004608:	4605      	mov	r5, r0
 800460a:	460c      	mov	r4, r1
 800460c:	b1db      	cbz	r3, 8004646 <_fflush_r+0x42>
 800460e:	b118      	cbz	r0, 8004618 <_fflush_r+0x14>
 8004610:	6983      	ldr	r3, [r0, #24]
 8004612:	b90b      	cbnz	r3, 8004618 <_fflush_r+0x14>
 8004614:	f000 f860 	bl	80046d8 <__sinit>
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <_fflush_r+0x48>)
 800461a:	429c      	cmp	r4, r3
 800461c:	d109      	bne.n	8004632 <_fflush_r+0x2e>
 800461e:	686c      	ldr	r4, [r5, #4]
 8004620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004624:	b17b      	cbz	r3, 8004646 <_fflush_r+0x42>
 8004626:	4621      	mov	r1, r4
 8004628:	4628      	mov	r0, r5
 800462a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800462e:	f7ff bf61 	b.w	80044f4 <__sflush_r>
 8004632:	4b07      	ldr	r3, [pc, #28]	; (8004650 <_fflush_r+0x4c>)
 8004634:	429c      	cmp	r4, r3
 8004636:	d101      	bne.n	800463c <_fflush_r+0x38>
 8004638:	68ac      	ldr	r4, [r5, #8]
 800463a:	e7f1      	b.n	8004620 <_fflush_r+0x1c>
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <_fflush_r+0x50>)
 800463e:	429c      	cmp	r4, r3
 8004640:	bf08      	it	eq
 8004642:	68ec      	ldreq	r4, [r5, #12]
 8004644:	e7ec      	b.n	8004620 <_fflush_r+0x1c>
 8004646:	2000      	movs	r0, #0
 8004648:	bd38      	pop	{r3, r4, r5, pc}
 800464a:	bf00      	nop
 800464c:	08004cd4 	.word	0x08004cd4
 8004650:	08004cf4 	.word	0x08004cf4
 8004654:	08004cb4 	.word	0x08004cb4

08004658 <_cleanup_r>:
 8004658:	4901      	ldr	r1, [pc, #4]	; (8004660 <_cleanup_r+0x8>)
 800465a:	f000 b8a9 	b.w	80047b0 <_fwalk_reent>
 800465e:	bf00      	nop
 8004660:	08004605 	.word	0x08004605

08004664 <std.isra.0>:
 8004664:	2300      	movs	r3, #0
 8004666:	b510      	push	{r4, lr}
 8004668:	4604      	mov	r4, r0
 800466a:	6003      	str	r3, [r0, #0]
 800466c:	6043      	str	r3, [r0, #4]
 800466e:	6083      	str	r3, [r0, #8]
 8004670:	8181      	strh	r1, [r0, #12]
 8004672:	6643      	str	r3, [r0, #100]	; 0x64
 8004674:	81c2      	strh	r2, [r0, #14]
 8004676:	6103      	str	r3, [r0, #16]
 8004678:	6143      	str	r3, [r0, #20]
 800467a:	6183      	str	r3, [r0, #24]
 800467c:	4619      	mov	r1, r3
 800467e:	2208      	movs	r2, #8
 8004680:	305c      	adds	r0, #92	; 0x5c
 8004682:	f7ff fe0a 	bl	800429a <memset>
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <std.isra.0+0x38>)
 8004688:	6263      	str	r3, [r4, #36]	; 0x24
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <std.isra.0+0x3c>)
 800468c:	62a3      	str	r3, [r4, #40]	; 0x28
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <std.isra.0+0x40>)
 8004690:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <std.isra.0+0x44>)
 8004694:	6224      	str	r4, [r4, #32]
 8004696:	6323      	str	r3, [r4, #48]	; 0x30
 8004698:	bd10      	pop	{r4, pc}
 800469a:	bf00      	nop
 800469c:	08004a2d 	.word	0x08004a2d
 80046a0:	08004a4f 	.word	0x08004a4f
 80046a4:	08004a87 	.word	0x08004a87
 80046a8:	08004aab 	.word	0x08004aab

080046ac <__sfmoreglue>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	1e4a      	subs	r2, r1, #1
 80046b0:	2568      	movs	r5, #104	; 0x68
 80046b2:	4355      	muls	r5, r2
 80046b4:	460e      	mov	r6, r1
 80046b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046ba:	f000 f949 	bl	8004950 <_malloc_r>
 80046be:	4604      	mov	r4, r0
 80046c0:	b140      	cbz	r0, 80046d4 <__sfmoreglue+0x28>
 80046c2:	2100      	movs	r1, #0
 80046c4:	e880 0042 	stmia.w	r0, {r1, r6}
 80046c8:	300c      	adds	r0, #12
 80046ca:	60a0      	str	r0, [r4, #8]
 80046cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046d0:	f7ff fde3 	bl	800429a <memset>
 80046d4:	4620      	mov	r0, r4
 80046d6:	bd70      	pop	{r4, r5, r6, pc}

080046d8 <__sinit>:
 80046d8:	6983      	ldr	r3, [r0, #24]
 80046da:	b510      	push	{r4, lr}
 80046dc:	4604      	mov	r4, r0
 80046de:	bb33      	cbnz	r3, 800472e <__sinit+0x56>
 80046e0:	6483      	str	r3, [r0, #72]	; 0x48
 80046e2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80046e4:	6503      	str	r3, [r0, #80]	; 0x50
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <__sinit+0x58>)
 80046e8:	4a12      	ldr	r2, [pc, #72]	; (8004734 <__sinit+0x5c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6282      	str	r2, [r0, #40]	; 0x28
 80046ee:	4298      	cmp	r0, r3
 80046f0:	bf04      	itt	eq
 80046f2:	2301      	moveq	r3, #1
 80046f4:	6183      	streq	r3, [r0, #24]
 80046f6:	f000 f81f 	bl	8004738 <__sfp>
 80046fa:	6060      	str	r0, [r4, #4]
 80046fc:	4620      	mov	r0, r4
 80046fe:	f000 f81b 	bl	8004738 <__sfp>
 8004702:	60a0      	str	r0, [r4, #8]
 8004704:	4620      	mov	r0, r4
 8004706:	f000 f817 	bl	8004738 <__sfp>
 800470a:	2200      	movs	r2, #0
 800470c:	60e0      	str	r0, [r4, #12]
 800470e:	2104      	movs	r1, #4
 8004710:	6860      	ldr	r0, [r4, #4]
 8004712:	f7ff ffa7 	bl	8004664 <std.isra.0>
 8004716:	2201      	movs	r2, #1
 8004718:	2109      	movs	r1, #9
 800471a:	68a0      	ldr	r0, [r4, #8]
 800471c:	f7ff ffa2 	bl	8004664 <std.isra.0>
 8004720:	2202      	movs	r2, #2
 8004722:	2112      	movs	r1, #18
 8004724:	68e0      	ldr	r0, [r4, #12]
 8004726:	f7ff ff9d 	bl	8004664 <std.isra.0>
 800472a:	2301      	movs	r3, #1
 800472c:	61a3      	str	r3, [r4, #24]
 800472e:	bd10      	pop	{r4, pc}
 8004730:	08004d14 	.word	0x08004d14
 8004734:	08004659 	.word	0x08004659

08004738 <__sfp>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <__sfp+0x74>)
 800473c:	681e      	ldr	r6, [r3, #0]
 800473e:	69b3      	ldr	r3, [r6, #24]
 8004740:	4607      	mov	r7, r0
 8004742:	b913      	cbnz	r3, 800474a <__sfp+0x12>
 8004744:	4630      	mov	r0, r6
 8004746:	f7ff ffc7 	bl	80046d8 <__sinit>
 800474a:	3648      	adds	r6, #72	; 0x48
 800474c:	68b4      	ldr	r4, [r6, #8]
 800474e:	6873      	ldr	r3, [r6, #4]
 8004750:	3b01      	subs	r3, #1
 8004752:	d503      	bpl.n	800475c <__sfp+0x24>
 8004754:	6833      	ldr	r3, [r6, #0]
 8004756:	b133      	cbz	r3, 8004766 <__sfp+0x2e>
 8004758:	6836      	ldr	r6, [r6, #0]
 800475a:	e7f7      	b.n	800474c <__sfp+0x14>
 800475c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004760:	b16d      	cbz	r5, 800477e <__sfp+0x46>
 8004762:	3468      	adds	r4, #104	; 0x68
 8004764:	e7f4      	b.n	8004750 <__sfp+0x18>
 8004766:	2104      	movs	r1, #4
 8004768:	4638      	mov	r0, r7
 800476a:	f7ff ff9f 	bl	80046ac <__sfmoreglue>
 800476e:	6030      	str	r0, [r6, #0]
 8004770:	2800      	cmp	r0, #0
 8004772:	d1f1      	bne.n	8004758 <__sfp+0x20>
 8004774:	230c      	movs	r3, #12
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	4604      	mov	r4, r0
 800477a:	4620      	mov	r0, r4
 800477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800477e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004782:	81e3      	strh	r3, [r4, #14]
 8004784:	2301      	movs	r3, #1
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	6665      	str	r5, [r4, #100]	; 0x64
 800478a:	6025      	str	r5, [r4, #0]
 800478c:	60a5      	str	r5, [r4, #8]
 800478e:	6065      	str	r5, [r4, #4]
 8004790:	6125      	str	r5, [r4, #16]
 8004792:	6165      	str	r5, [r4, #20]
 8004794:	61a5      	str	r5, [r4, #24]
 8004796:	2208      	movs	r2, #8
 8004798:	4629      	mov	r1, r5
 800479a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800479e:	f7ff fd7c 	bl	800429a <memset>
 80047a2:	6365      	str	r5, [r4, #52]	; 0x34
 80047a4:	63a5      	str	r5, [r4, #56]	; 0x38
 80047a6:	64a5      	str	r5, [r4, #72]	; 0x48
 80047a8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80047aa:	e7e6      	b.n	800477a <__sfp+0x42>
 80047ac:	08004d14 	.word	0x08004d14

080047b0 <_fwalk_reent>:
 80047b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b4:	4680      	mov	r8, r0
 80047b6:	4689      	mov	r9, r1
 80047b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047bc:	2600      	movs	r6, #0
 80047be:	b914      	cbnz	r4, 80047c6 <_fwalk_reent+0x16>
 80047c0:	4630      	mov	r0, r6
 80047c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047c6:	68a5      	ldr	r5, [r4, #8]
 80047c8:	6867      	ldr	r7, [r4, #4]
 80047ca:	3f01      	subs	r7, #1
 80047cc:	d501      	bpl.n	80047d2 <_fwalk_reent+0x22>
 80047ce:	6824      	ldr	r4, [r4, #0]
 80047d0:	e7f5      	b.n	80047be <_fwalk_reent+0xe>
 80047d2:	89ab      	ldrh	r3, [r5, #12]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d907      	bls.n	80047e8 <_fwalk_reent+0x38>
 80047d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047dc:	3301      	adds	r3, #1
 80047de:	d003      	beq.n	80047e8 <_fwalk_reent+0x38>
 80047e0:	4629      	mov	r1, r5
 80047e2:	4640      	mov	r0, r8
 80047e4:	47c8      	blx	r9
 80047e6:	4306      	orrs	r6, r0
 80047e8:	3568      	adds	r5, #104	; 0x68
 80047ea:	e7ee      	b.n	80047ca <_fwalk_reent+0x1a>

080047ec <__swhatbuf_r>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	460e      	mov	r6, r1
 80047f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f4:	2900      	cmp	r1, #0
 80047f6:	b090      	sub	sp, #64	; 0x40
 80047f8:	4614      	mov	r4, r2
 80047fa:	461d      	mov	r5, r3
 80047fc:	da07      	bge.n	800480e <__swhatbuf_r+0x22>
 80047fe:	2300      	movs	r3, #0
 8004800:	602b      	str	r3, [r5, #0]
 8004802:	89b3      	ldrh	r3, [r6, #12]
 8004804:	061a      	lsls	r2, r3, #24
 8004806:	d410      	bmi.n	800482a <__swhatbuf_r+0x3e>
 8004808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800480c:	e00e      	b.n	800482c <__swhatbuf_r+0x40>
 800480e:	aa01      	add	r2, sp, #4
 8004810:	f000 f972 	bl	8004af8 <_fstat_r>
 8004814:	2800      	cmp	r0, #0
 8004816:	dbf2      	blt.n	80047fe <__swhatbuf_r+0x12>
 8004818:	9a02      	ldr	r2, [sp, #8]
 800481a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800481e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004822:	425a      	negs	r2, r3
 8004824:	415a      	adcs	r2, r3
 8004826:	602a      	str	r2, [r5, #0]
 8004828:	e7ee      	b.n	8004808 <__swhatbuf_r+0x1c>
 800482a:	2340      	movs	r3, #64	; 0x40
 800482c:	2000      	movs	r0, #0
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	b010      	add	sp, #64	; 0x40
 8004832:	bd70      	pop	{r4, r5, r6, pc}

08004834 <__smakebuf_r>:
 8004834:	898b      	ldrh	r3, [r1, #12]
 8004836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004838:	079d      	lsls	r5, r3, #30
 800483a:	4606      	mov	r6, r0
 800483c:	460c      	mov	r4, r1
 800483e:	d507      	bpl.n	8004850 <__smakebuf_r+0x1c>
 8004840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	6123      	str	r3, [r4, #16]
 8004848:	2301      	movs	r3, #1
 800484a:	6163      	str	r3, [r4, #20]
 800484c:	b002      	add	sp, #8
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	ab01      	add	r3, sp, #4
 8004852:	466a      	mov	r2, sp
 8004854:	f7ff ffca 	bl	80047ec <__swhatbuf_r>
 8004858:	9900      	ldr	r1, [sp, #0]
 800485a:	4605      	mov	r5, r0
 800485c:	4630      	mov	r0, r6
 800485e:	f000 f877 	bl	8004950 <_malloc_r>
 8004862:	b948      	cbnz	r0, 8004878 <__smakebuf_r+0x44>
 8004864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004868:	059a      	lsls	r2, r3, #22
 800486a:	d4ef      	bmi.n	800484c <__smakebuf_r+0x18>
 800486c:	f023 0303 	bic.w	r3, r3, #3
 8004870:	f043 0302 	orr.w	r3, r3, #2
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	e7e3      	b.n	8004840 <__smakebuf_r+0xc>
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <__smakebuf_r+0x7c>)
 800487a:	62b3      	str	r3, [r6, #40]	; 0x28
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	6020      	str	r0, [r4, #0]
 8004880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004884:	81a3      	strh	r3, [r4, #12]
 8004886:	9b00      	ldr	r3, [sp, #0]
 8004888:	6163      	str	r3, [r4, #20]
 800488a:	9b01      	ldr	r3, [sp, #4]
 800488c:	6120      	str	r0, [r4, #16]
 800488e:	b15b      	cbz	r3, 80048a8 <__smakebuf_r+0x74>
 8004890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004894:	4630      	mov	r0, r6
 8004896:	f000 f941 	bl	8004b1c <_isatty_r>
 800489a:	b128      	cbz	r0, 80048a8 <__smakebuf_r+0x74>
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	81a3      	strh	r3, [r4, #12]
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	431d      	orrs	r5, r3
 80048ac:	81a5      	strh	r5, [r4, #12]
 80048ae:	e7cd      	b.n	800484c <__smakebuf_r+0x18>
 80048b0:	08004659 	.word	0x08004659

080048b4 <_free_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4605      	mov	r5, r0
 80048b8:	2900      	cmp	r1, #0
 80048ba:	d045      	beq.n	8004948 <_free_r+0x94>
 80048bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c0:	1f0c      	subs	r4, r1, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	bfb8      	it	lt
 80048c6:	18e4      	addlt	r4, r4, r3
 80048c8:	f000 f94a 	bl	8004b60 <__malloc_lock>
 80048cc:	4a1f      	ldr	r2, [pc, #124]	; (800494c <_free_r+0x98>)
 80048ce:	6813      	ldr	r3, [r2, #0]
 80048d0:	4610      	mov	r0, r2
 80048d2:	b933      	cbnz	r3, 80048e2 <_free_r+0x2e>
 80048d4:	6063      	str	r3, [r4, #4]
 80048d6:	6014      	str	r4, [r2, #0]
 80048d8:	4628      	mov	r0, r5
 80048da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048de:	f000 b940 	b.w	8004b62 <__malloc_unlock>
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	d90c      	bls.n	8004900 <_free_r+0x4c>
 80048e6:	6821      	ldr	r1, [r4, #0]
 80048e8:	1862      	adds	r2, r4, r1
 80048ea:	4293      	cmp	r3, r2
 80048ec:	bf04      	itt	eq
 80048ee:	681a      	ldreq	r2, [r3, #0]
 80048f0:	685b      	ldreq	r3, [r3, #4]
 80048f2:	6063      	str	r3, [r4, #4]
 80048f4:	bf04      	itt	eq
 80048f6:	1852      	addeq	r2, r2, r1
 80048f8:	6022      	streq	r2, [r4, #0]
 80048fa:	6004      	str	r4, [r0, #0]
 80048fc:	e7ec      	b.n	80048d8 <_free_r+0x24>
 80048fe:	4613      	mov	r3, r2
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	b10a      	cbz	r2, 8004908 <_free_r+0x54>
 8004904:	42a2      	cmp	r2, r4
 8004906:	d9fa      	bls.n	80048fe <_free_r+0x4a>
 8004908:	6819      	ldr	r1, [r3, #0]
 800490a:	1858      	adds	r0, r3, r1
 800490c:	42a0      	cmp	r0, r4
 800490e:	d10b      	bne.n	8004928 <_free_r+0x74>
 8004910:	6820      	ldr	r0, [r4, #0]
 8004912:	4401      	add	r1, r0
 8004914:	1858      	adds	r0, r3, r1
 8004916:	4282      	cmp	r2, r0
 8004918:	6019      	str	r1, [r3, #0]
 800491a:	d1dd      	bne.n	80048d8 <_free_r+0x24>
 800491c:	6810      	ldr	r0, [r2, #0]
 800491e:	6852      	ldr	r2, [r2, #4]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	4401      	add	r1, r0
 8004924:	6019      	str	r1, [r3, #0]
 8004926:	e7d7      	b.n	80048d8 <_free_r+0x24>
 8004928:	d902      	bls.n	8004930 <_free_r+0x7c>
 800492a:	230c      	movs	r3, #12
 800492c:	602b      	str	r3, [r5, #0]
 800492e:	e7d3      	b.n	80048d8 <_free_r+0x24>
 8004930:	6820      	ldr	r0, [r4, #0]
 8004932:	1821      	adds	r1, r4, r0
 8004934:	428a      	cmp	r2, r1
 8004936:	bf04      	itt	eq
 8004938:	6811      	ldreq	r1, [r2, #0]
 800493a:	6852      	ldreq	r2, [r2, #4]
 800493c:	6062      	str	r2, [r4, #4]
 800493e:	bf04      	itt	eq
 8004940:	1809      	addeq	r1, r1, r0
 8004942:	6021      	streq	r1, [r4, #0]
 8004944:	605c      	str	r4, [r3, #4]
 8004946:	e7c7      	b.n	80048d8 <_free_r+0x24>
 8004948:	bd38      	pop	{r3, r4, r5, pc}
 800494a:	bf00      	nop
 800494c:	20001dec 	.word	0x20001dec

08004950 <_malloc_r>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	1ccd      	adds	r5, r1, #3
 8004954:	f025 0503 	bic.w	r5, r5, #3
 8004958:	3508      	adds	r5, #8
 800495a:	2d0c      	cmp	r5, #12
 800495c:	bf38      	it	cc
 800495e:	250c      	movcc	r5, #12
 8004960:	2d00      	cmp	r5, #0
 8004962:	4606      	mov	r6, r0
 8004964:	db01      	blt.n	800496a <_malloc_r+0x1a>
 8004966:	42a9      	cmp	r1, r5
 8004968:	d903      	bls.n	8004972 <_malloc_r+0x22>
 800496a:	230c      	movs	r3, #12
 800496c:	6033      	str	r3, [r6, #0]
 800496e:	2000      	movs	r0, #0
 8004970:	bd70      	pop	{r4, r5, r6, pc}
 8004972:	f000 f8f5 	bl	8004b60 <__malloc_lock>
 8004976:	4a23      	ldr	r2, [pc, #140]	; (8004a04 <_malloc_r+0xb4>)
 8004978:	6814      	ldr	r4, [r2, #0]
 800497a:	4621      	mov	r1, r4
 800497c:	b991      	cbnz	r1, 80049a4 <_malloc_r+0x54>
 800497e:	4c22      	ldr	r4, [pc, #136]	; (8004a08 <_malloc_r+0xb8>)
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	b91b      	cbnz	r3, 800498c <_malloc_r+0x3c>
 8004984:	4630      	mov	r0, r6
 8004986:	f000 f841 	bl	8004a0c <_sbrk_r>
 800498a:	6020      	str	r0, [r4, #0]
 800498c:	4629      	mov	r1, r5
 800498e:	4630      	mov	r0, r6
 8004990:	f000 f83c 	bl	8004a0c <_sbrk_r>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d126      	bne.n	80049e6 <_malloc_r+0x96>
 8004998:	230c      	movs	r3, #12
 800499a:	6033      	str	r3, [r6, #0]
 800499c:	4630      	mov	r0, r6
 800499e:	f000 f8e0 	bl	8004b62 <__malloc_unlock>
 80049a2:	e7e4      	b.n	800496e <_malloc_r+0x1e>
 80049a4:	680b      	ldr	r3, [r1, #0]
 80049a6:	1b5b      	subs	r3, r3, r5
 80049a8:	d41a      	bmi.n	80049e0 <_malloc_r+0x90>
 80049aa:	2b0b      	cmp	r3, #11
 80049ac:	d90f      	bls.n	80049ce <_malloc_r+0x7e>
 80049ae:	600b      	str	r3, [r1, #0]
 80049b0:	50cd      	str	r5, [r1, r3]
 80049b2:	18cc      	adds	r4, r1, r3
 80049b4:	4630      	mov	r0, r6
 80049b6:	f000 f8d4 	bl	8004b62 <__malloc_unlock>
 80049ba:	f104 000b 	add.w	r0, r4, #11
 80049be:	1d23      	adds	r3, r4, #4
 80049c0:	f020 0007 	bic.w	r0, r0, #7
 80049c4:	1ac3      	subs	r3, r0, r3
 80049c6:	d01b      	beq.n	8004a00 <_malloc_r+0xb0>
 80049c8:	425a      	negs	r2, r3
 80049ca:	50e2      	str	r2, [r4, r3]
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	428c      	cmp	r4, r1
 80049d0:	bf0d      	iteet	eq
 80049d2:	6863      	ldreq	r3, [r4, #4]
 80049d4:	684b      	ldrne	r3, [r1, #4]
 80049d6:	6063      	strne	r3, [r4, #4]
 80049d8:	6013      	streq	r3, [r2, #0]
 80049da:	bf18      	it	ne
 80049dc:	460c      	movne	r4, r1
 80049de:	e7e9      	b.n	80049b4 <_malloc_r+0x64>
 80049e0:	460c      	mov	r4, r1
 80049e2:	6849      	ldr	r1, [r1, #4]
 80049e4:	e7ca      	b.n	800497c <_malloc_r+0x2c>
 80049e6:	1cc4      	adds	r4, r0, #3
 80049e8:	f024 0403 	bic.w	r4, r4, #3
 80049ec:	42a0      	cmp	r0, r4
 80049ee:	d005      	beq.n	80049fc <_malloc_r+0xac>
 80049f0:	1a21      	subs	r1, r4, r0
 80049f2:	4630      	mov	r0, r6
 80049f4:	f000 f80a 	bl	8004a0c <_sbrk_r>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d0cd      	beq.n	8004998 <_malloc_r+0x48>
 80049fc:	6025      	str	r5, [r4, #0]
 80049fe:	e7d9      	b.n	80049b4 <_malloc_r+0x64>
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
 8004a02:	bf00      	nop
 8004a04:	20001dec 	.word	0x20001dec
 8004a08:	20001df0 	.word	0x20001df0

08004a0c <_sbrk_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4c06      	ldr	r4, [pc, #24]	; (8004a28 <_sbrk_r+0x1c>)
 8004a10:	2300      	movs	r3, #0
 8004a12:	4605      	mov	r5, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	f7ff f922 	bl	8003c60 <_sbrk>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_sbrk_r+0x1a>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_sbrk_r+0x1a>
 8004a24:	602b      	str	r3, [r5, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	20001ec4 	.word	0x20001ec4

08004a2c <__sread>:
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	460c      	mov	r4, r1
 8004a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a34:	f000 f896 	bl	8004b64 <_read_r>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	bfab      	itete	ge
 8004a3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a40:	181b      	addge	r3, r3, r0
 8004a42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a46:	bfac      	ite	ge
 8004a48:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a4a:	81a3      	strhlt	r3, [r4, #12]
 8004a4c:	bd10      	pop	{r4, pc}

08004a4e <__swrite>:
 8004a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a52:	461f      	mov	r7, r3
 8004a54:	898b      	ldrh	r3, [r1, #12]
 8004a56:	05db      	lsls	r3, r3, #23
 8004a58:	4605      	mov	r5, r0
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	4616      	mov	r6, r2
 8004a5e:	d505      	bpl.n	8004a6c <__swrite+0x1e>
 8004a60:	2302      	movs	r3, #2
 8004a62:	2200      	movs	r2, #0
 8004a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a68:	f000 f868 	bl	8004b3c <_lseek_r>
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a76:	81a3      	strh	r3, [r4, #12]
 8004a78:	4632      	mov	r2, r6
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a82:	f000 b817 	b.w	8004ab4 <_write_r>

08004a86 <__sseek>:
 8004a86:	b510      	push	{r4, lr}
 8004a88:	460c      	mov	r4, r1
 8004a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8e:	f000 f855 	bl	8004b3c <_lseek_r>
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	bf15      	itete	ne
 8004a98:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aa2:	81a3      	strheq	r3, [r4, #12]
 8004aa4:	bf18      	it	ne
 8004aa6:	81a3      	strhne	r3, [r4, #12]
 8004aa8:	bd10      	pop	{r4, pc}

08004aaa <__sclose>:
 8004aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aae:	f000 b813 	b.w	8004ad8 <_close_r>
	...

08004ab4 <_write_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4c07      	ldr	r4, [pc, #28]	; (8004ad4 <_write_r+0x20>)
 8004ab8:	4605      	mov	r5, r0
 8004aba:	4608      	mov	r0, r1
 8004abc:	4611      	mov	r1, r2
 8004abe:	2200      	movs	r2, #0
 8004ac0:	6022      	str	r2, [r4, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f7ff f8ae 	bl	8003c24 <_write>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d102      	bne.n	8004ad2 <_write_r+0x1e>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	b103      	cbz	r3, 8004ad2 <_write_r+0x1e>
 8004ad0:	602b      	str	r3, [r5, #0]
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
 8004ad4:	20001ec4 	.word	0x20001ec4

08004ad8 <_close_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4c06      	ldr	r4, [pc, #24]	; (8004af4 <_close_r+0x1c>)
 8004adc:	2300      	movs	r3, #0
 8004ade:	4605      	mov	r5, r0
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	f7ff f8dc 	bl	8003ca0 <_close>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_close_r+0x1a>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_close_r+0x1a>
 8004af0:	602b      	str	r3, [r5, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	20001ec4 	.word	0x20001ec4

08004af8 <_fstat_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4c07      	ldr	r4, [pc, #28]	; (8004b18 <_fstat_r+0x20>)
 8004afc:	2300      	movs	r3, #0
 8004afe:	4605      	mov	r5, r0
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	f7ff f8dd 	bl	8003cc4 <_fstat>
 8004b0a:	1c43      	adds	r3, r0, #1
 8004b0c:	d102      	bne.n	8004b14 <_fstat_r+0x1c>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	b103      	cbz	r3, 8004b14 <_fstat_r+0x1c>
 8004b12:	602b      	str	r3, [r5, #0]
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
 8004b16:	bf00      	nop
 8004b18:	20001ec4 	.word	0x20001ec4

08004b1c <_isatty_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4c06      	ldr	r4, [pc, #24]	; (8004b38 <_isatty_r+0x1c>)
 8004b20:	2300      	movs	r3, #0
 8004b22:	4605      	mov	r5, r0
 8004b24:	4608      	mov	r0, r1
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	f7ff f8de 	bl	8003ce8 <_isatty>
 8004b2c:	1c43      	adds	r3, r0, #1
 8004b2e:	d102      	bne.n	8004b36 <_isatty_r+0x1a>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	b103      	cbz	r3, 8004b36 <_isatty_r+0x1a>
 8004b34:	602b      	str	r3, [r5, #0]
 8004b36:	bd38      	pop	{r3, r4, r5, pc}
 8004b38:	20001ec4 	.word	0x20001ec4

08004b3c <_lseek_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4c07      	ldr	r4, [pc, #28]	; (8004b5c <_lseek_r+0x20>)
 8004b40:	4605      	mov	r5, r0
 8004b42:	4608      	mov	r0, r1
 8004b44:	4611      	mov	r1, r2
 8004b46:	2200      	movs	r2, #0
 8004b48:	6022      	str	r2, [r4, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f7ff f8dc 	bl	8003d08 <_lseek>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_lseek_r+0x1e>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_lseek_r+0x1e>
 8004b58:	602b      	str	r3, [r5, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	20001ec4 	.word	0x20001ec4

08004b60 <__malloc_lock>:
 8004b60:	4770      	bx	lr

08004b62 <__malloc_unlock>:
 8004b62:	4770      	bx	lr

08004b64 <_read_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4c07      	ldr	r4, [pc, #28]	; (8004b84 <_read_r+0x20>)
 8004b68:	4605      	mov	r5, r0
 8004b6a:	4608      	mov	r0, r1
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	2200      	movs	r2, #0
 8004b70:	6022      	str	r2, [r4, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f7ff f8dc 	bl	8003d30 <_read>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_read_r+0x1e>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_read_r+0x1e>
 8004b80:	602b      	str	r3, [r5, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	20001ec4 	.word	0x20001ec4
 8004b88:	454c4449 	.word	0x454c4449
 8004b8c:	00000000 	.word	0x00000000
 8004b90:	20726d54 	.word	0x20726d54
 8004b94:	00637653 	.word	0x00637653
 8004b98:	51726d54 	.word	0x51726d54
 8004b9c:	00000000 	.word	0x00000000
 8004ba0:	207e7e7e 	.word	0x207e7e7e
 8004ba4:	474f5250 	.word	0x474f5250
 8004ba8:	204d4152 	.word	0x204d4152
 8004bac:	52415453 	.word	0x52415453
 8004bb0:	7e7e2054 	.word	0x7e7e2054
 8004bb4:	0000007e 	.word	0x0000007e
 8004bb8:	203e3d3d 	.word	0x203e3d3d
 8004bbc:	72617453 	.word	0x72617453
 8004bc0:	676e6974 	.word	0x676e6974
 8004bc4:	68635320 	.word	0x68635320
 8004bc8:	6c756465 	.word	0x6c756465
 8004bcc:	2e2e7265 	.word	0x2e2e7265
 8004bd0:	0000002e 	.word	0x0000002e
 8004bd4:	4e524157 	.word	0x4e524157
 8004bd8:	21474e49 	.word	0x21474e49
 8004bdc:	614d2021 	.word	0x614d2021
 8004be0:	45206e69 	.word	0x45206e69
 8004be4:	69746978 	.word	0x69746978
 8004be8:	2e2e676e 	.word	0x2e2e676e
 8004bec:	0000002e 	.word	0x0000002e
 8004bf0:	203e3d3d 	.word	0x203e3d3d
 8004bf4:	72617453 	.word	0x72617453
 8004bf8:	676e6974 	.word	0x676e6974
 8004bfc:	53415420 	.word	0x53415420
 8004c00:	46203a4b 	.word	0x46203a4b
 8004c04:	20574f4c 	.word	0x20574f4c
 8004c08:	504d4153 	.word	0x504d4153
 8004c0c:	0052454c 	.word	0x0052454c
 8004c10:	203e3d3d 	.word	0x203e3d3d
 8004c14:	72617453 	.word	0x72617453
 8004c18:	676e6974 	.word	0x676e6974
 8004c1c:	53415420 	.word	0x53415420
 8004c20:	54203a4b 	.word	0x54203a4b
 8004c24:	66666172 	.word	0x66666172
 8004c28:	47206369 	.word	0x47206369
 8004c2c:	72656e65 	.word	0x72656e65
 8004c30:	726f7461 	.word	0x726f7461
 8004c34:	00000000 	.word	0x00000000
 8004c38:	6867694c 	.word	0x6867694c
 8004c3c:	74532074 	.word	0x74532074
 8004c40:	3a657461 	.word	0x3a657461
 8004c44:	45524720 	.word	0x45524720
 8004c48:	00004e45 	.word	0x00004e45
 8004c4c:	6867694c 	.word	0x6867694c
 8004c50:	74532074 	.word	0x74532074
 8004c54:	3a657461 	.word	0x3a657461
 8004c58:	4c455920 	.word	0x4c455920
 8004c5c:	00574f4c 	.word	0x00574f4c
 8004c60:	6867694c 	.word	0x6867694c
 8004c64:	74532074 	.word	0x74532074
 8004c68:	3a657461 	.word	0x3a657461
 8004c6c:	44455220 	.word	0x44455220
 8004c70:	00000000 	.word	0x00000000
 8004c74:	6d695374 	.word	0x6d695374
 8004c78:	74616c75 	.word	0x74616c75
 8004c7c:	0000726f 	.word	0x0000726f
 8004c80:	6867696c 	.word	0x6867696c
 8004c84:	4d534674 	.word	0x4d534674
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	20434441 	.word	0x20434441
 8004c90:	756c6156 	.word	0x756c6156
 8004c94:	25203a65 	.word	0x25203a65
 8004c98:	00000a64 	.word	0x00000a64
 8004c9c:	53434441 	.word	0x53434441
 8004ca0:	6c706d61 	.word	0x6c706d61
 8004ca4:	00007265 	.word	0x00007265
 8004ca8:	4c434441 	.word	0x4c434441
 8004cac:	74686769 	.word	0x74686769
 8004cb0:	00004457 	.word	0x00004457

08004cb4 <__sf_fake_stderr>:
	...

08004cd4 <__sf_fake_stdin>:
	...

08004cf4 <__sf_fake_stdout>:
	...

08004d14 <_global_impure_ptr>:
 8004d14:	2000001c                                ... 

08004d18 <_init>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	bf00      	nop
 8004d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1e:	bc08      	pop	{r3}
 8004d20:	469e      	mov	lr, r3
 8004d22:	4770      	bx	lr

08004d24 <_fini>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	bf00      	nop
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr
